// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: options.proto

package com.baidu.brpc.protocol;

public final class Options {
  private Options() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registry.add(com.baidu.brpc.protocol.Options.serviceTimeout);
    registry.add(com.baidu.brpc.protocol.Options.requestTalkType);
    registry.add(com.baidu.brpc.protocol.Options.responseTalkType);
    registry.add(com.baidu.brpc.protocol.Options.methodTimeout);
    registry.add(com.baidu.brpc.protocol.Options.requestCompression);
    registry.add(com.baidu.brpc.protocol.Options.responseCompression);
  }
  /**
   * Protobuf enum {@code brpc.TalkType}
   */
  public enum TalkType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TALK_TYPE_NORMAL = 0;</code>
     */
    TALK_TYPE_NORMAL(0, 0),
    /**
     * <code>TALK_TYPE_ONEWAY = 1;</code>
     */
    TALK_TYPE_ONEWAY(1, 1),
    ;

    /**
     * <code>TALK_TYPE_NORMAL = 0;</code>
     */
    public static final int TALK_TYPE_NORMAL_VALUE = 0;
    /**
     * <code>TALK_TYPE_ONEWAY = 1;</code>
     */
    public static final int TALK_TYPE_ONEWAY_VALUE = 1;


    public final int getNumber() { return value; }

    public static TalkType valueOf(int value) {
      switch (value) {
        case 0: return TALK_TYPE_NORMAL;
        case 1: return TALK_TYPE_ONEWAY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TalkType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TalkType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TalkType>() {
            public TalkType findValueByNumber(int number) {
              return TalkType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.baidu.brpc.protocol.Options.getDescriptor().getEnumTypes().get(0);
    }

    private static final TalkType[] VALUES = values();

    public static TalkType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private TalkType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:brpc.TalkType)
  }

  /**
   * Protobuf enum {@code brpc.ConnectionType}
   */
  public enum ConnectionType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CONNECTION_TYPE_UNKNOWN = 0;</code>
     *
     * <pre>
     * bit-exclusive values since we may OR them to represent supported types.
     * </pre>
     */
    CONNECTION_TYPE_UNKNOWN(0, 0),
    /**
     * <code>CONNECTION_TYPE_SINGLE = 1;</code>
     */
    CONNECTION_TYPE_SINGLE(1, 1),
    /**
     * <code>CONNECTION_TYPE_POOLED = 2;</code>
     */
    CONNECTION_TYPE_POOLED(2, 2),
    /**
     * <code>CONNECTION_TYPE_SHORT = 4;</code>
     */
    CONNECTION_TYPE_SHORT(3, 4),
    ;

    /**
     * <code>CONNECTION_TYPE_UNKNOWN = 0;</code>
     *
     * <pre>
     * bit-exclusive values since we may OR them to represent supported types.
     * </pre>
     */
    public static final int CONNECTION_TYPE_UNKNOWN_VALUE = 0;
    /**
     * <code>CONNECTION_TYPE_SINGLE = 1;</code>
     */
    public static final int CONNECTION_TYPE_SINGLE_VALUE = 1;
    /**
     * <code>CONNECTION_TYPE_POOLED = 2;</code>
     */
    public static final int CONNECTION_TYPE_POOLED_VALUE = 2;
    /**
     * <code>CONNECTION_TYPE_SHORT = 4;</code>
     */
    public static final int CONNECTION_TYPE_SHORT_VALUE = 4;


    public final int getNumber() { return value; }

    public static ConnectionType valueOf(int value) {
      switch (value) {
        case 0: return CONNECTION_TYPE_UNKNOWN;
        case 1: return CONNECTION_TYPE_SINGLE;
        case 2: return CONNECTION_TYPE_POOLED;
        case 4: return CONNECTION_TYPE_SHORT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ConnectionType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ConnectionType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ConnectionType>() {
            public ConnectionType findValueByNumber(int number) {
              return ConnectionType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.baidu.brpc.protocol.Options.getDescriptor().getEnumTypes().get(1);
    }

    private static final ConnectionType[] VALUES = values();

    public static ConnectionType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ConnectionType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:brpc.ConnectionType)
  }

  /**
   * Protobuf enum {@code brpc.ProtocolType}
   */
  public enum ProtocolType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PROTOCOL_UNKNOWN = 0;</code>
     */
    PROTOCOL_UNKNOWN(0, 0),
    /**
     * <code>PROTOCOL_BAIDU_STD = 1;</code>
     */
    PROTOCOL_BAIDU_STD(1, 1),
    /**
     * <code>PROTOCOL_STREAMING_RPC = 2;</code>
     */
    PROTOCOL_STREAMING_RPC(2, 2),
    /**
     * <code>PROTOCOL_HULU_PBRPC = 3;</code>
     */
    PROTOCOL_HULU_PBRPC(3, 3),
    /**
     * <code>PROTOCOL_SOFA_PBRPC = 4;</code>
     */
    PROTOCOL_SOFA_PBRPC(4, 4),
    /**
     * <code>PROTOCOL_RTMP = 5;</code>
     */
    PROTOCOL_RTMP(5, 5),
    /**
     * <code>PROTOCOL_HTTP = 6;</code>
     */
    PROTOCOL_HTTP(6, 6),
    /**
     * <code>PROTOCOL_PUBLIC_PBRPC = 7;</code>
     */
    PROTOCOL_PUBLIC_PBRPC(7, 7),
    /**
     * <code>PROTOCOL_NOVA_PBRPC = 8;</code>
     */
    PROTOCOL_NOVA_PBRPC(8, 8),
    /**
     * <code>PROTOCOL_NSHEAD_CLIENT = 9;</code>
     *
     * <pre>
     * implemented in baidu-rpc-ub
     * </pre>
     */
    PROTOCOL_NSHEAD_CLIENT(9, 9),
    /**
     * <code>PROTOCOL_NSHEAD = 10;</code>
     */
    PROTOCOL_NSHEAD(10, 10),
    /**
     * <code>PROTOCOL_HADOOP_RPC = 11;</code>
     */
    PROTOCOL_HADOOP_RPC(11, 11),
    /**
     * <code>PROTOCOL_HADOOP_SERVER_RPC = 12;</code>
     */
    PROTOCOL_HADOOP_SERVER_RPC(12, 12),
    /**
     * <code>PROTOCOL_MONGO = 13;</code>
     *
     * <pre>
     * server side only
     * </pre>
     */
    PROTOCOL_MONGO(13, 13),
    /**
     * <code>PROTOCOL_UBRPC_COMPACK = 14;</code>
     */
    PROTOCOL_UBRPC_COMPACK(14, 14),
    /**
     * <code>PROTOCOL_DIDX_CLIENT = 15;</code>
     *
     * <pre>
     * Client side only
     * </pre>
     */
    PROTOCOL_DIDX_CLIENT(15, 15),
    /**
     * <code>PROTOCOL_REDIS = 16;</code>
     *
     * <pre>
     * Client side only
     * </pre>
     */
    PROTOCOL_REDIS(16, 16),
    /**
     * <code>PROTOCOL_MEMCACHE = 17;</code>
     *
     * <pre>
     * Client side only
     * </pre>
     */
    PROTOCOL_MEMCACHE(17, 17),
    /**
     * <code>PROTOCOL_ITP = 18;</code>
     */
    PROTOCOL_ITP(18, 18),
    /**
     * <code>PROTOCOL_NSHEAD_MCPACK = 19;</code>
     */
    PROTOCOL_NSHEAD_MCPACK(19, 19),
    /**
     * <code>PROTOCOL_DISP_IDL = 20;</code>
     *
     * <pre>
     * Client side only
     * </pre>
     */
    PROTOCOL_DISP_IDL(20, 20),
    /**
     * <code>PROTOCOL_ERSDA_CLIENT = 21;</code>
     *
     * <pre>
     * Client side only
     * </pre>
     */
    PROTOCOL_ERSDA_CLIENT(21, 21),
    /**
     * <code>PROTOCOL_UBRPC_MCPACK2 = 22;</code>
     *
     * <pre>
     * Client side only
     * </pre>
     */
    PROTOCOL_UBRPC_MCPACK2(22, 22),
    /**
     * <code>PROTOCOL_CDS_AGENT = 23;</code>
     *
     * <pre>
     * Reserve special protocol for cds-agent, which depends on FIFO right now
     * </pre>
     */
    PROTOCOL_CDS_AGENT(23, 23),
    /**
     * <code>PROTOCOL_ESP = 24;</code>
     *
     * <pre>
     * Client side only
     * </pre>
     */
    PROTOCOL_ESP(24, 24),
    /**
     * <code>PROTOCOL_BAIDU_JSON_RPC_MCPACK = 25;</code>
     *
     * <pre>
     * baidu http json rpc: http + mcpack
     * </pre>
     */
    PROTOCOL_BAIDU_JSON_RPC_MCPACK(25, 25),
    /**
     * <code>PROTOCOL_BAIDU_JSON_RPC_JSON = 26;</code>
     *
     * <pre>
     * baidu http json rpc: http + json
     * </pre>
     */
    PROTOCOL_BAIDU_JSON_RPC_JSON(26, 26),
    /**
     * <code>PROTOCOL_NSHEAD_PROTOBUF = 28;</code>
     *
     * <pre>
     * nshead + protobuf
     * </pre>
     */
    PROTOCOL_NSHEAD_PROTOBUF(27, 28),
    /**
     * <code>PROTOCOL_HTTP_PROTOBUF = 29;</code>
     *
     * <pre>
     * http + protobuf
     * </pre>
     */
    PROTOCOL_HTTP_PROTOBUF(28, 29),
    /**
     * <code>PROTOCOL_HTTP_JSON = 30;</code>
     *
     * <pre>
     * http + json
     * </pre>
     */
    PROTOCOL_HTTP_JSON(29, 30),
    /**
     * <code>PROTOCOL_NSHEAD_JSON = 31;</code>
     *
     * <pre>
     * nshead + json
     * </pre>
     */
    PROTOCOL_NSHEAD_JSON(30, 31),
    /**
     * <code>PROTOCOL_STARGATE = 32;</code>
     *
     * <pre>
     * Stargate
     * </pre>
     */
    PROTOCOL_STARGATE(31, 32),
    /**
     * <code>PROTOCOL_SERVER_PUSH = 33;</code>
     *
     * <pre>
     * default server push protocol
     * </pre>
     */
    PROTOCOL_SERVER_PUSH(32, 33),
    /**
     * <code>PROTOCOL_DUBBO = 34;</code>
     *
     * <pre>
     * dubbo
     * </pre>
     */
    PROTOCOL_DUBBO(33, 34),
    ;

    /**
     * <code>PROTOCOL_UNKNOWN = 0;</code>
     */
    public static final int PROTOCOL_UNKNOWN_VALUE = 0;
    /**
     * <code>PROTOCOL_BAIDU_STD = 1;</code>
     */
    public static final int PROTOCOL_BAIDU_STD_VALUE = 1;
    /**
     * <code>PROTOCOL_STREAMING_RPC = 2;</code>
     */
    public static final int PROTOCOL_STREAMING_RPC_VALUE = 2;
    /**
     * <code>PROTOCOL_HULU_PBRPC = 3;</code>
     */
    public static final int PROTOCOL_HULU_PBRPC_VALUE = 3;
    /**
     * <code>PROTOCOL_SOFA_PBRPC = 4;</code>
     */
    public static final int PROTOCOL_SOFA_PBRPC_VALUE = 4;
    /**
     * <code>PROTOCOL_RTMP = 5;</code>
     */
    public static final int PROTOCOL_RTMP_VALUE = 5;
    /**
     * <code>PROTOCOL_HTTP = 6;</code>
     */
    public static final int PROTOCOL_HTTP_VALUE = 6;
    /**
     * <code>PROTOCOL_PUBLIC_PBRPC = 7;</code>
     */
    public static final int PROTOCOL_PUBLIC_PBRPC_VALUE = 7;
    /**
     * <code>PROTOCOL_NOVA_PBRPC = 8;</code>
     */
    public static final int PROTOCOL_NOVA_PBRPC_VALUE = 8;
    /**
     * <code>PROTOCOL_NSHEAD_CLIENT = 9;</code>
     *
     * <pre>
     * implemented in baidu-rpc-ub
     * </pre>
     */
    public static final int PROTOCOL_NSHEAD_CLIENT_VALUE = 9;
    /**
     * <code>PROTOCOL_NSHEAD = 10;</code>
     */
    public static final int PROTOCOL_NSHEAD_VALUE = 10;
    /**
     * <code>PROTOCOL_HADOOP_RPC = 11;</code>
     */
    public static final int PROTOCOL_HADOOP_RPC_VALUE = 11;
    /**
     * <code>PROTOCOL_HADOOP_SERVER_RPC = 12;</code>
     */
    public static final int PROTOCOL_HADOOP_SERVER_RPC_VALUE = 12;
    /**
     * <code>PROTOCOL_MONGO = 13;</code>
     *
     * <pre>
     * server side only
     * </pre>
     */
    public static final int PROTOCOL_MONGO_VALUE = 13;
    /**
     * <code>PROTOCOL_UBRPC_COMPACK = 14;</code>
     */
    public static final int PROTOCOL_UBRPC_COMPACK_VALUE = 14;
    /**
     * <code>PROTOCOL_DIDX_CLIENT = 15;</code>
     *
     * <pre>
     * Client side only
     * </pre>
     */
    public static final int PROTOCOL_DIDX_CLIENT_VALUE = 15;
    /**
     * <code>PROTOCOL_REDIS = 16;</code>
     *
     * <pre>
     * Client side only
     * </pre>
     */
    public static final int PROTOCOL_REDIS_VALUE = 16;
    /**
     * <code>PROTOCOL_MEMCACHE = 17;</code>
     *
     * <pre>
     * Client side only
     * </pre>
     */
    public static final int PROTOCOL_MEMCACHE_VALUE = 17;
    /**
     * <code>PROTOCOL_ITP = 18;</code>
     */
    public static final int PROTOCOL_ITP_VALUE = 18;
    /**
     * <code>PROTOCOL_NSHEAD_MCPACK = 19;</code>
     */
    public static final int PROTOCOL_NSHEAD_MCPACK_VALUE = 19;
    /**
     * <code>PROTOCOL_DISP_IDL = 20;</code>
     *
     * <pre>
     * Client side only
     * </pre>
     */
    public static final int PROTOCOL_DISP_IDL_VALUE = 20;
    /**
     * <code>PROTOCOL_ERSDA_CLIENT = 21;</code>
     *
     * <pre>
     * Client side only
     * </pre>
     */
    public static final int PROTOCOL_ERSDA_CLIENT_VALUE = 21;
    /**
     * <code>PROTOCOL_UBRPC_MCPACK2 = 22;</code>
     *
     * <pre>
     * Client side only
     * </pre>
     */
    public static final int PROTOCOL_UBRPC_MCPACK2_VALUE = 22;
    /**
     * <code>PROTOCOL_CDS_AGENT = 23;</code>
     *
     * <pre>
     * Reserve special protocol for cds-agent, which depends on FIFO right now
     * </pre>
     */
    public static final int PROTOCOL_CDS_AGENT_VALUE = 23;
    /**
     * <code>PROTOCOL_ESP = 24;</code>
     *
     * <pre>
     * Client side only
     * </pre>
     */
    public static final int PROTOCOL_ESP_VALUE = 24;
    /**
     * <code>PROTOCOL_BAIDU_JSON_RPC_MCPACK = 25;</code>
     *
     * <pre>
     * baidu http json rpc: http + mcpack
     * </pre>
     */
    public static final int PROTOCOL_BAIDU_JSON_RPC_MCPACK_VALUE = 25;
    /**
     * <code>PROTOCOL_BAIDU_JSON_RPC_JSON = 26;</code>
     *
     * <pre>
     * baidu http json rpc: http + json
     * </pre>
     */
    public static final int PROTOCOL_BAIDU_JSON_RPC_JSON_VALUE = 26;
    /**
     * <code>PROTOCOL_NSHEAD_PROTOBUF = 28;</code>
     *
     * <pre>
     * nshead + protobuf
     * </pre>
     */
    public static final int PROTOCOL_NSHEAD_PROTOBUF_VALUE = 28;
    /**
     * <code>PROTOCOL_HTTP_PROTOBUF = 29;</code>
     *
     * <pre>
     * http + protobuf
     * </pre>
     */
    public static final int PROTOCOL_HTTP_PROTOBUF_VALUE = 29;
    /**
     * <code>PROTOCOL_HTTP_JSON = 30;</code>
     *
     * <pre>
     * http + json
     * </pre>
     */
    public static final int PROTOCOL_HTTP_JSON_VALUE = 30;
    /**
     * <code>PROTOCOL_NSHEAD_JSON = 31;</code>
     *
     * <pre>
     * nshead + json
     * </pre>
     */
    public static final int PROTOCOL_NSHEAD_JSON_VALUE = 31;
    /**
     * <code>PROTOCOL_STARGATE = 32;</code>
     *
     * <pre>
     * Stargate
     * </pre>
     */
    public static final int PROTOCOL_STARGATE_VALUE = 32;
    /**
     * <code>PROTOCOL_SERVER_PUSH = 33;</code>
     *
     * <pre>
     * default server push protocol
     * </pre>
     */
    public static final int PROTOCOL_SERVER_PUSH_VALUE = 33;
    /**
     * <code>PROTOCOL_DUBBO = 34;</code>
     *
     * <pre>
     * dubbo
     * </pre>
     */
    public static final int PROTOCOL_DUBBO_VALUE = 34;


    public final int getNumber() { return value; }

    public static ProtocolType valueOf(int value) {
      switch (value) {
        case 0: return PROTOCOL_UNKNOWN;
        case 1: return PROTOCOL_BAIDU_STD;
        case 2: return PROTOCOL_STREAMING_RPC;
        case 3: return PROTOCOL_HULU_PBRPC;
        case 4: return PROTOCOL_SOFA_PBRPC;
        case 5: return PROTOCOL_RTMP;
        case 6: return PROTOCOL_HTTP;
        case 7: return PROTOCOL_PUBLIC_PBRPC;
        case 8: return PROTOCOL_NOVA_PBRPC;
        case 9: return PROTOCOL_NSHEAD_CLIENT;
        case 10: return PROTOCOL_NSHEAD;
        case 11: return PROTOCOL_HADOOP_RPC;
        case 12: return PROTOCOL_HADOOP_SERVER_RPC;
        case 13: return PROTOCOL_MONGO;
        case 14: return PROTOCOL_UBRPC_COMPACK;
        case 15: return PROTOCOL_DIDX_CLIENT;
        case 16: return PROTOCOL_REDIS;
        case 17: return PROTOCOL_MEMCACHE;
        case 18: return PROTOCOL_ITP;
        case 19: return PROTOCOL_NSHEAD_MCPACK;
        case 20: return PROTOCOL_DISP_IDL;
        case 21: return PROTOCOL_ERSDA_CLIENT;
        case 22: return PROTOCOL_UBRPC_MCPACK2;
        case 23: return PROTOCOL_CDS_AGENT;
        case 24: return PROTOCOL_ESP;
        case 25: return PROTOCOL_BAIDU_JSON_RPC_MCPACK;
        case 26: return PROTOCOL_BAIDU_JSON_RPC_JSON;
        case 28: return PROTOCOL_NSHEAD_PROTOBUF;
        case 29: return PROTOCOL_HTTP_PROTOBUF;
        case 30: return PROTOCOL_HTTP_JSON;
        case 31: return PROTOCOL_NSHEAD_JSON;
        case 32: return PROTOCOL_STARGATE;
        case 33: return PROTOCOL_SERVER_PUSH;
        case 34: return PROTOCOL_DUBBO;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ProtocolType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ProtocolType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ProtocolType>() {
            public ProtocolType findValueByNumber(int number) {
              return ProtocolType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.baidu.brpc.protocol.Options.getDescriptor().getEnumTypes().get(2);
    }

    private static final ProtocolType[] VALUES = values();

    public static ProtocolType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ProtocolType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:brpc.ProtocolType)
  }

  /**
   * Protobuf enum {@code brpc.CompressType}
   */
  public enum CompressType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>COMPRESS_TYPE_NONE = 0;</code>
     */
    COMPRESS_TYPE_NONE(0, 0),
    /**
     * <code>COMPRESS_TYPE_SNAPPY = 1;</code>
     */
    COMPRESS_TYPE_SNAPPY(1, 1),
    /**
     * <code>COMPRESS_TYPE_GZIP = 2;</code>
     */
    COMPRESS_TYPE_GZIP(2, 2),
    /**
     * <code>COMPRESS_TYPE_ZLIB = 3;</code>
     */
    COMPRESS_TYPE_ZLIB(3, 3),
    /**
     * <code>COMPRESS_TYPE_LZ4 = 4;</code>
     */
    COMPRESS_TYPE_LZ4(4, 4),
    ;

    /**
     * <code>COMPRESS_TYPE_NONE = 0;</code>
     */
    public static final int COMPRESS_TYPE_NONE_VALUE = 0;
    /**
     * <code>COMPRESS_TYPE_SNAPPY = 1;</code>
     */
    public static final int COMPRESS_TYPE_SNAPPY_VALUE = 1;
    /**
     * <code>COMPRESS_TYPE_GZIP = 2;</code>
     */
    public static final int COMPRESS_TYPE_GZIP_VALUE = 2;
    /**
     * <code>COMPRESS_TYPE_ZLIB = 3;</code>
     */
    public static final int COMPRESS_TYPE_ZLIB_VALUE = 3;
    /**
     * <code>COMPRESS_TYPE_LZ4 = 4;</code>
     */
    public static final int COMPRESS_TYPE_LZ4_VALUE = 4;


    public final int getNumber() { return value; }

    public static CompressType valueOf(int value) {
      switch (value) {
        case 0: return COMPRESS_TYPE_NONE;
        case 1: return COMPRESS_TYPE_SNAPPY;
        case 2: return COMPRESS_TYPE_GZIP;
        case 3: return COMPRESS_TYPE_ZLIB;
        case 4: return COMPRESS_TYPE_LZ4;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CompressType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<CompressType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CompressType>() {
            public CompressType findValueByNumber(int number) {
              return CompressType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.baidu.brpc.protocol.Options.getDescriptor().getEnumTypes().get(3);
    }

    private static final CompressType[] VALUES = values();

    public static CompressType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private CompressType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:brpc.CompressType)
  }

  public interface ChunkInfoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int64 stream_id = 1;
    /**
     * <code>required int64 stream_id = 1;</code>
     */
    boolean hasStreamId();
    /**
     * <code>required int64 stream_id = 1;</code>
     */
    long getStreamId();

    // required int64 chunk_id = 2;
    /**
     * <code>required int64 chunk_id = 2;</code>
     */
    boolean hasChunkId();
    /**
     * <code>required int64 chunk_id = 2;</code>
     */
    long getChunkId();
  }
  /**
   * Protobuf type {@code brpc.ChunkInfo}
   */
  public static final class ChunkInfo extends
      com.google.protobuf.GeneratedMessage
      implements ChunkInfoOrBuilder {
    // Use ChunkInfo.newBuilder() to construct.
    private ChunkInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ChunkInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ChunkInfo defaultInstance;
    public static ChunkInfo getDefaultInstance() {
      return defaultInstance;
    }

    public ChunkInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ChunkInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              streamId_ = input.readInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              chunkId_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.baidu.brpc.protocol.Options.internal_static_brpc_ChunkInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.baidu.brpc.protocol.Options.internal_static_brpc_ChunkInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.baidu.brpc.protocol.Options.ChunkInfo.class, com.baidu.brpc.protocol.Options.ChunkInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<ChunkInfo> PARSER =
        new com.google.protobuf.AbstractParser<ChunkInfo>() {
      public ChunkInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ChunkInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ChunkInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int64 stream_id = 1;
    public static final int STREAM_ID_FIELD_NUMBER = 1;
    private long streamId_;
    /**
     * <code>required int64 stream_id = 1;</code>
     */
    public boolean hasStreamId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 stream_id = 1;</code>
     */
    public long getStreamId() {
      return streamId_;
    }

    // required int64 chunk_id = 2;
    public static final int CHUNK_ID_FIELD_NUMBER = 2;
    private long chunkId_;
    /**
     * <code>required int64 chunk_id = 2;</code>
     */
    public boolean hasChunkId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int64 chunk_id = 2;</code>
     */
    public long getChunkId() {
      return chunkId_;
    }

    private void initFields() {
      streamId_ = 0L;
      chunkId_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasStreamId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasChunkId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, streamId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, chunkId_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, streamId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, chunkId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.baidu.brpc.protocol.Options.ChunkInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.baidu.brpc.protocol.Options.ChunkInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.baidu.brpc.protocol.Options.ChunkInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.baidu.brpc.protocol.Options.ChunkInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.baidu.brpc.protocol.Options.ChunkInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.baidu.brpc.protocol.Options.ChunkInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.baidu.brpc.protocol.Options.ChunkInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.baidu.brpc.protocol.Options.ChunkInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.baidu.brpc.protocol.Options.ChunkInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.baidu.brpc.protocol.Options.ChunkInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.baidu.brpc.protocol.Options.ChunkInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code brpc.ChunkInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.baidu.brpc.protocol.Options.ChunkInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.baidu.brpc.protocol.Options.internal_static_brpc_ChunkInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.baidu.brpc.protocol.Options.internal_static_brpc_ChunkInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.baidu.brpc.protocol.Options.ChunkInfo.class, com.baidu.brpc.protocol.Options.ChunkInfo.Builder.class);
      }

      // Construct using com.baidu.brpc.protocol.Options.ChunkInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        streamId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        chunkId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.baidu.brpc.protocol.Options.internal_static_brpc_ChunkInfo_descriptor;
      }

      public com.baidu.brpc.protocol.Options.ChunkInfo getDefaultInstanceForType() {
        return com.baidu.brpc.protocol.Options.ChunkInfo.getDefaultInstance();
      }

      public com.baidu.brpc.protocol.Options.ChunkInfo build() {
        com.baidu.brpc.protocol.Options.ChunkInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.baidu.brpc.protocol.Options.ChunkInfo buildPartial() {
        com.baidu.brpc.protocol.Options.ChunkInfo result = new com.baidu.brpc.protocol.Options.ChunkInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.streamId_ = streamId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.chunkId_ = chunkId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.baidu.brpc.protocol.Options.ChunkInfo) {
          return mergeFrom((com.baidu.brpc.protocol.Options.ChunkInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.baidu.brpc.protocol.Options.ChunkInfo other) {
        if (other == com.baidu.brpc.protocol.Options.ChunkInfo.getDefaultInstance()) return this;
        if (other.hasStreamId()) {
          setStreamId(other.getStreamId());
        }
        if (other.hasChunkId()) {
          setChunkId(other.getChunkId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasStreamId()) {
          
          return false;
        }
        if (!hasChunkId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.baidu.brpc.protocol.Options.ChunkInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.baidu.brpc.protocol.Options.ChunkInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int64 stream_id = 1;
      private long streamId_ ;
      /**
       * <code>required int64 stream_id = 1;</code>
       */
      public boolean hasStreamId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 stream_id = 1;</code>
       */
      public long getStreamId() {
        return streamId_;
      }
      /**
       * <code>required int64 stream_id = 1;</code>
       */
      public Builder setStreamId(long value) {
        bitField0_ |= 0x00000001;
        streamId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 stream_id = 1;</code>
       */
      public Builder clearStreamId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        streamId_ = 0L;
        onChanged();
        return this;
      }

      // required int64 chunk_id = 2;
      private long chunkId_ ;
      /**
       * <code>required int64 chunk_id = 2;</code>
       */
      public boolean hasChunkId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int64 chunk_id = 2;</code>
       */
      public long getChunkId() {
        return chunkId_;
      }
      /**
       * <code>required int64 chunk_id = 2;</code>
       */
      public Builder setChunkId(long value) {
        bitField0_ |= 0x00000002;
        chunkId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 chunk_id = 2;</code>
       */
      public Builder clearChunkId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        chunkId_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:brpc.ChunkInfo)
    }

    static {
      defaultInstance = new ChunkInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:brpc.ChunkInfo)
  }

  public static final int SERVICE_TIMEOUT_FIELD_NUMBER = 90000;
  /**
   * <code>extend .google.protobuf.ServiceOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.ServiceOptions,
      java.lang.Long> serviceTimeout = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Long.class,
        null);
  public static final int REQUEST_TALK_TYPE_FIELD_NUMBER = 90001;
  /**
   * <code>extend .google.protobuf.MethodOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.MethodOptions,
      com.baidu.brpc.protocol.Options.TalkType> requestTalkType = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        com.baidu.brpc.protocol.Options.TalkType.class,
        null);
  public static final int RESPONSE_TALK_TYPE_FIELD_NUMBER = 90002;
  /**
   * <code>extend .google.protobuf.MethodOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.MethodOptions,
      com.baidu.brpc.protocol.Options.TalkType> responseTalkType = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        com.baidu.brpc.protocol.Options.TalkType.class,
        null);
  public static final int METHOD_TIMEOUT_FIELD_NUMBER = 90003;
  /**
   * <code>extend .google.protobuf.MethodOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.MethodOptions,
      java.lang.Long> methodTimeout = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Long.class,
        null);
  public static final int REQUEST_COMPRESSION_FIELD_NUMBER = 90004;
  /**
   * <code>extend .google.protobuf.MethodOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.MethodOptions,
      com.baidu.brpc.protocol.Options.CompressType> requestCompression = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        com.baidu.brpc.protocol.Options.CompressType.class,
        null);
  public static final int RESPONSE_COMPRESSION_FIELD_NUMBER = 90005;
  /**
   * <code>extend .google.protobuf.MethodOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.MethodOptions,
      com.baidu.brpc.protocol.Options.CompressType> responseCompression = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        com.baidu.brpc.protocol.Options.CompressType.class,
        null);
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_brpc_ChunkInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_brpc_ChunkInfo_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\roptions.proto\022\004brpc\032 google/protobuf/d" +
      "escriptor.proto\"0\n\tChunkInfo\022\021\n\tstream_i" +
      "d\030\001 \002(\003\022\020\n\010chunk_id\030\002 \002(\003*6\n\010TalkType\022\024\n" +
      "\020TALK_TYPE_NORMAL\020\000\022\024\n\020TALK_TYPE_ONEWAY\020" +
      "\001*\200\001\n\016ConnectionType\022\033\n\027CONNECTION_TYPE_" +
      "UNKNOWN\020\000\022\032\n\026CONNECTION_TYPE_SINGLE\020\001\022\032\n" +
      "\026CONNECTION_TYPE_POOLED\020\002\022\031\n\025CONNECTION_" +
      "TYPE_SHORT\020\004*\340\006\n\014ProtocolType\022\024\n\020PROTOCO" +
      "L_UNKNOWN\020\000\022\026\n\022PROTOCOL_BAIDU_STD\020\001\022\032\n\026P" +
      "ROTOCOL_STREAMING_RPC\020\002\022\027\n\023PROTOCOL_HULU",
      "_PBRPC\020\003\022\027\n\023PROTOCOL_SOFA_PBRPC\020\004\022\021\n\rPRO" +
      "TOCOL_RTMP\020\005\022\021\n\rPROTOCOL_HTTP\020\006\022\031\n\025PROTO" +
      "COL_PUBLIC_PBRPC\020\007\022\027\n\023PROTOCOL_NOVA_PBRP" +
      "C\020\010\022\032\n\026PROTOCOL_NSHEAD_CLIENT\020\t\022\023\n\017PROTO" +
      "COL_NSHEAD\020\n\022\027\n\023PROTOCOL_HADOOP_RPC\020\013\022\036\n" +
      "\032PROTOCOL_HADOOP_SERVER_RPC\020\014\022\022\n\016PROTOCO" +
      "L_MONGO\020\r\022\032\n\026PROTOCOL_UBRPC_COMPACK\020\016\022\030\n" +
      "\024PROTOCOL_DIDX_CLIENT\020\017\022\022\n\016PROTOCOL_REDI" +
      "S\020\020\022\025\n\021PROTOCOL_MEMCACHE\020\021\022\020\n\014PROTOCOL_I" +
      "TP\020\022\022\032\n\026PROTOCOL_NSHEAD_MCPACK\020\023\022\025\n\021PROT",
      "OCOL_DISP_IDL\020\024\022\031\n\025PROTOCOL_ERSDA_CLIENT" +
      "\020\025\022\032\n\026PROTOCOL_UBRPC_MCPACK2\020\026\022\026\n\022PROTOC" +
      "OL_CDS_AGENT\020\027\022\020\n\014PROTOCOL_ESP\020\030\022\"\n\036PROT" +
      "OCOL_BAIDU_JSON_RPC_MCPACK\020\031\022 \n\034PROTOCOL" +
      "_BAIDU_JSON_RPC_JSON\020\032\022\034\n\030PROTOCOL_NSHEA" +
      "D_PROTOBUF\020\034\022\032\n\026PROTOCOL_HTTP_PROTOBUF\020\035" +
      "\022\026\n\022PROTOCOL_HTTP_JSON\020\036\022\030\n\024PROTOCOL_NSH" +
      "EAD_JSON\020\037\022\025\n\021PROTOCOL_STARGATE\020 \022\030\n\024PRO" +
      "TOCOL_SERVER_PUSH\020!\022\022\n\016PROTOCOL_DUBBO\020\"*" +
      "\207\001\n\014CompressType\022\026\n\022COMPRESS_TYPE_NONE\020\000",
      "\022\030\n\024COMPRESS_TYPE_SNAPPY\020\001\022\026\n\022COMPRESS_T" +
      "YPE_GZIP\020\002\022\026\n\022COMPRESS_TYPE_ZLIB\020\003\022\025\n\021CO" +
      "MPRESS_TYPE_LZ4\020\004:A\n\017service_timeout\022\037.g" +
      "oogle.protobuf.ServiceOptions\030\220\277\005 \001(\003:\0051" +
      "0000:]\n\021request_talk_type\022\036.google.proto" +
      "buf.MethodOptions\030\221\277\005 \001(\0162\016.brpc.TalkTyp" +
      "e:\020TALK_TYPE_NORMAL:^\n\022response_talk_typ" +
      "e\022\036.google.protobuf.MethodOptions\030\222\277\005 \001(" +
      "\0162\016.brpc.TalkType:\020TALK_TYPE_NORMAL:8\n\016m" +
      "ethod_timeout\022\036.google.protobuf.MethodOp",
      "tions\030\223\277\005 \001(\003:e\n\023request_compression\022\036.g" +
      "oogle.protobuf.MethodOptions\030\224\277\005 \001(\0162\022.b" +
      "rpc.CompressType:\022COMPRESS_TYPE_NONE:f\n\024" +
      "response_compression\022\036.google.protobuf.M" +
      "ethodOptions\030\225\277\005 \001(\0162\022.brpc.CompressType" +
      ":\022COMPRESS_TYPE_NONEB\"\n\027com.baidu.brpc.p" +
      "rotocolB\007Options"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_brpc_ChunkInfo_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_brpc_ChunkInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_brpc_ChunkInfo_descriptor,
              new java.lang.String[] { "StreamId", "ChunkId", });
          serviceTimeout.internalInit(descriptor.getExtensions().get(0));
          requestTalkType.internalInit(descriptor.getExtensions().get(1));
          responseTalkType.internalInit(descriptor.getExtensions().get(2));
          methodTimeout.internalInit(descriptor.getExtensions().get(3));
          requestCompression.internalInit(descriptor.getExtensions().get(4));
          responseCompression.internalInit(descriptor.getExtensions().get(5));
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.DescriptorProtos.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
