// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errno.proto

package com.baidu.brpc.protocol;

public final class BaiduRpcErrno {
  private BaiduRpcErrno() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code brpc.Errno}
   */
  public enum Errno
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SYS_EPERM = 1;</code>
     *
     * <pre>
     * option allow_alias = false; this option is available since 2.5.0
     * Linux system errno are prefixed with SYS_.
     * Since sometimes linux errno such as ENOMEM and ETIMEDOUT is set or
     * checked by some other libaries which are out of control by RPC framework,
     * it's important to make sure that the explanation of an errno is exactly
     * the same in both client-side and server-side. If linux errno is unware
     * (e.g. in JAVA program), it's required to use SYS_*.
     * </pre>
     */
    SYS_EPERM(0, 1),
    /**
     * <code>SYS_ENOENT = 2;</code>
     *
     * <pre>
     * No such file or directory
     * </pre>
     */
    SYS_ENOENT(1, 2),
    /**
     * <code>SYS_ESRCH = 3;</code>
     *
     * <pre>
     * No such process
     * </pre>
     */
    SYS_ESRCH(2, 3),
    /**
     * <code>SYS_EINTR = 4;</code>
     *
     * <pre>
     * Interrupted system call
     * </pre>
     */
    SYS_EINTR(3, 4),
    /**
     * <code>SYS_EIO = 5;</code>
     *
     * <pre>
     * I/O error
     * </pre>
     */
    SYS_EIO(4, 5),
    /**
     * <code>SYS_ENXIO = 6;</code>
     *
     * <pre>
     * No such device or address
     * </pre>
     */
    SYS_ENXIO(5, 6),
    /**
     * <code>SYS_E2BIG = 7;</code>
     *
     * <pre>
     * Arg list too long
     * </pre>
     */
    SYS_E2BIG(6, 7),
    /**
     * <code>SYS_ENOEXEC = 8;</code>
     *
     * <pre>
     * Exec format error
     * </pre>
     */
    SYS_ENOEXEC(7, 8),
    /**
     * <code>SYS_EBADF = 9;</code>
     *
     * <pre>
     * Bad file number
     * </pre>
     */
    SYS_EBADF(8, 9),
    /**
     * <code>SYS_ECHILD = 10;</code>
     *
     * <pre>
     * No child processes
     * </pre>
     */
    SYS_ECHILD(9, 10),
    /**
     * <code>SYS_EAGAIN = 11;</code>
     *
     * <pre>
     * Try again
     * </pre>
     */
    SYS_EAGAIN(10, 11),
    /**
     * <code>SYS_ENOMEM = 12;</code>
     *
     * <pre>
     * Out of memory
     * </pre>
     */
    SYS_ENOMEM(11, 12),
    /**
     * <code>SYS_EACCES = 13;</code>
     *
     * <pre>
     * Permission denied
     * </pre>
     */
    SYS_EACCES(12, 13),
    /**
     * <code>SYS_EFAULT = 14;</code>
     *
     * <pre>
     * Bad address
     * </pre>
     */
    SYS_EFAULT(13, 14),
    /**
     * <code>SYS_ENOTBLK = 15;</code>
     *
     * <pre>
     * Block device required
     * </pre>
     */
    SYS_ENOTBLK(14, 15),
    /**
     * <code>SYS_EBUSY = 16;</code>
     *
     * <pre>
     * Device or resource busy
     * </pre>
     */
    SYS_EBUSY(15, 16),
    /**
     * <code>SYS_EEXIST = 17;</code>
     *
     * <pre>
     * File exists
     * </pre>
     */
    SYS_EEXIST(16, 17),
    /**
     * <code>SYS_EXDEV = 18;</code>
     *
     * <pre>
     * Cross-device link
     * </pre>
     */
    SYS_EXDEV(17, 18),
    /**
     * <code>SYS_ENODEV = 19;</code>
     *
     * <pre>
     * No such device
     * </pre>
     */
    SYS_ENODEV(18, 19),
    /**
     * <code>SYS_ENOTDIR = 20;</code>
     *
     * <pre>
     * Not a directory
     * </pre>
     */
    SYS_ENOTDIR(19, 20),
    /**
     * <code>SYS_EISDIR = 21;</code>
     *
     * <pre>
     * Is a directory
     * </pre>
     */
    SYS_EISDIR(20, 21),
    /**
     * <code>SYS_EINVAL = 22;</code>
     *
     * <pre>
     * Invalid argument
     * </pre>
     */
    SYS_EINVAL(21, 22),
    /**
     * <code>SYS_ENFILE = 23;</code>
     *
     * <pre>
     * File table overflow
     * </pre>
     */
    SYS_ENFILE(22, 23),
    /**
     * <code>SYS_EMFILE = 24;</code>
     *
     * <pre>
     * Too many open files
     * </pre>
     */
    SYS_EMFILE(23, 24),
    /**
     * <code>SYS_ENOTTY = 25;</code>
     *
     * <pre>
     * Not a typewriter
     * </pre>
     */
    SYS_ENOTTY(24, 25),
    /**
     * <code>SYS_ETXTBSY = 26;</code>
     *
     * <pre>
     * Text file busy
     * </pre>
     */
    SYS_ETXTBSY(25, 26),
    /**
     * <code>SYS_EFBIG = 27;</code>
     *
     * <pre>
     * File too large
     * </pre>
     */
    SYS_EFBIG(26, 27),
    /**
     * <code>SYS_ENOSPC = 28;</code>
     *
     * <pre>
     * No space left on device
     * </pre>
     */
    SYS_ENOSPC(27, 28),
    /**
     * <code>SYS_ESPIPE = 29;</code>
     *
     * <pre>
     * Illegal seek
     * </pre>
     */
    SYS_ESPIPE(28, 29),
    /**
     * <code>SYS_EROFS = 30;</code>
     *
     * <pre>
     * Read-only file system
     * </pre>
     */
    SYS_EROFS(29, 30),
    /**
     * <code>SYS_EMLINK = 31;</code>
     *
     * <pre>
     * Too many links
     * </pre>
     */
    SYS_EMLINK(30, 31),
    /**
     * <code>SYS_EPIPE = 32;</code>
     *
     * <pre>
     * Broken pipe
     * </pre>
     */
    SYS_EPIPE(31, 32),
    /**
     * <code>SYS_EDOM = 33;</code>
     *
     * <pre>
     * Math argument out of domain of func
     * </pre>
     */
    SYS_EDOM(32, 33),
    /**
     * <code>SYS_ERANGE = 34;</code>
     *
     * <pre>
     * Math result not representable
     * </pre>
     */
    SYS_ERANGE(33, 34),
    /**
     * <code>SYS_EDEADLK = 35;</code>
     *
     * <pre>
     * Resource deadlock would occur
     * </pre>
     */
    SYS_EDEADLK(34, 35),
    /**
     * <code>SYS_ENAMETOOLONG = 36;</code>
     *
     * <pre>
     * File name too long
     * </pre>
     */
    SYS_ENAMETOOLONG(35, 36),
    /**
     * <code>SYS_ENOLCK = 37;</code>
     *
     * <pre>
     * No record locks available
     * </pre>
     */
    SYS_ENOLCK(36, 37),
    /**
     * <code>SYS_ENOSYS = 38;</code>
     *
     * <pre>
     * Function not implemented
     * </pre>
     */
    SYS_ENOSYS(37, 38),
    /**
     * <code>SYS_ENOTEMPTY = 39;</code>
     *
     * <pre>
     * Directory not empty
     * </pre>
     */
    SYS_ENOTEMPTY(38, 39),
    /**
     * <code>SYS_ELOOP = 40;</code>
     *
     * <pre>
     * Too many symbolic links encountered
     * </pre>
     */
    SYS_ELOOP(39, 40),
    /**
     * <code>SYS_ENOMSG = 42;</code>
     *
     * <pre>
     * No message of desired type
     * </pre>
     */
    SYS_ENOMSG(40, 42),
    /**
     * <code>SYS_EIDRM = 43;</code>
     *
     * <pre>
     * Identifier removed
     * </pre>
     */
    SYS_EIDRM(41, 43),
    /**
     * <code>SYS_ECHRNG = 44;</code>
     *
     * <pre>
     * Channel number out of range
     * </pre>
     */
    SYS_ECHRNG(42, 44),
    /**
     * <code>SYS_EL2NSYNC = 45;</code>
     *
     * <pre>
     * Level= 2;not synchronized
     * </pre>
     */
    SYS_EL2NSYNC(43, 45),
    /**
     * <code>SYS_EL3HLT = 46;</code>
     *
     * <pre>
     * Level= 3;halted
     * </pre>
     */
    SYS_EL3HLT(44, 46),
    /**
     * <code>SYS_EL3RST = 47;</code>
     *
     * <pre>
     * Level= 3;reset
     * </pre>
     */
    SYS_EL3RST(45, 47),
    /**
     * <code>SYS_ELNRNG = 48;</code>
     *
     * <pre>
     * Link number out of range
     * </pre>
     */
    SYS_ELNRNG(46, 48),
    /**
     * <code>SYS_EUNATCH = 49;</code>
     *
     * <pre>
     * Protocol driver not attached
     * </pre>
     */
    SYS_EUNATCH(47, 49),
    /**
     * <code>SYS_ENOCSI = 50;</code>
     *
     * <pre>
     * No CSI structure available
     * </pre>
     */
    SYS_ENOCSI(48, 50),
    /**
     * <code>SYS_EL2HLT = 51;</code>
     *
     * <pre>
     * Level= 2;halted
     * </pre>
     */
    SYS_EL2HLT(49, 51),
    /**
     * <code>SYS_EBADE = 52;</code>
     *
     * <pre>
     * Invalid exchange
     * </pre>
     */
    SYS_EBADE(50, 52),
    /**
     * <code>SYS_EBADR = 53;</code>
     *
     * <pre>
     * Invalid request descriptor
     * </pre>
     */
    SYS_EBADR(51, 53),
    /**
     * <code>SYS_EXFULL = 54;</code>
     *
     * <pre>
     * Exchange full
     * </pre>
     */
    SYS_EXFULL(52, 54),
    /**
     * <code>SYS_ENOANO = 55;</code>
     *
     * <pre>
     * No anode
     * </pre>
     */
    SYS_ENOANO(53, 55),
    /**
     * <code>SYS_EBADRQC = 56;</code>
     *
     * <pre>
     * Invalid request code
     * </pre>
     */
    SYS_EBADRQC(54, 56),
    /**
     * <code>SYS_EBADSLT = 57;</code>
     *
     * <pre>
     * Invalid slot
     * </pre>
     */
    SYS_EBADSLT(55, 57),
    /**
     * <code>SYS_EBFONT = 59;</code>
     *
     * <pre>
     * Bad font file format
     * </pre>
     */
    SYS_EBFONT(56, 59),
    /**
     * <code>SYS_ENOSTR = 60;</code>
     *
     * <pre>
     * Device not a stream
     * </pre>
     */
    SYS_ENOSTR(57, 60),
    /**
     * <code>SYS_ENODATA = 61;</code>
     *
     * <pre>
     * No data available
     * </pre>
     */
    SYS_ENODATA(58, 61),
    /**
     * <code>SYS_ETIME = 62;</code>
     *
     * <pre>
     * Timer expired
     * </pre>
     */
    SYS_ETIME(59, 62),
    /**
     * <code>SYS_ENOSR = 63;</code>
     *
     * <pre>
     * Out of streams resources
     * </pre>
     */
    SYS_ENOSR(60, 63),
    /**
     * <code>SYS_ENONET = 64;</code>
     *
     * <pre>
     * Machine is not on the network
     * </pre>
     */
    SYS_ENONET(61, 64),
    /**
     * <code>SYS_ENOPKG = 65;</code>
     *
     * <pre>
     * Package not installed
     * </pre>
     */
    SYS_ENOPKG(62, 65),
    /**
     * <code>SYS_EREMOTE = 66;</code>
     *
     * <pre>
     * Object is remote
     * </pre>
     */
    SYS_EREMOTE(63, 66),
    /**
     * <code>SYS_ENOLINK = 67;</code>
     *
     * <pre>
     * Link has been severed
     * </pre>
     */
    SYS_ENOLINK(64, 67),
    /**
     * <code>SYS_EADV = 68;</code>
     *
     * <pre>
     * Advertise error
     * </pre>
     */
    SYS_EADV(65, 68),
    /**
     * <code>SYS_ESRMNT = 69;</code>
     *
     * <pre>
     * Srmount error
     * </pre>
     */
    SYS_ESRMNT(66, 69),
    /**
     * <code>SYS_ECOMM = 70;</code>
     *
     * <pre>
     * Communication error on send
     * </pre>
     */
    SYS_ECOMM(67, 70),
    /**
     * <code>SYS_EPROTO = 71;</code>
     *
     * <pre>
     * Protocol error
     * </pre>
     */
    SYS_EPROTO(68, 71),
    /**
     * <code>SYS_EMULTIHOP = 72;</code>
     *
     * <pre>
     * Multihop attempted
     * </pre>
     */
    SYS_EMULTIHOP(69, 72),
    /**
     * <code>SYS_EDOTDOT = 73;</code>
     *
     * <pre>
     * RFS specific error
     * </pre>
     */
    SYS_EDOTDOT(70, 73),
    /**
     * <code>SYS_EBADMSG = 74;</code>
     *
     * <pre>
     * Not a data message
     * </pre>
     */
    SYS_EBADMSG(71, 74),
    /**
     * <code>SYS_EOVERFLOW = 75;</code>
     *
     * <pre>
     * Value too large for defined data type
     * </pre>
     */
    SYS_EOVERFLOW(72, 75),
    /**
     * <code>SYS_ENOTUNIQ = 76;</code>
     *
     * <pre>
     * Name not unique on network
     * </pre>
     */
    SYS_ENOTUNIQ(73, 76),
    /**
     * <code>SYS_EBADFD = 77;</code>
     *
     * <pre>
     * File descriptor in bad state
     * </pre>
     */
    SYS_EBADFD(74, 77),
    /**
     * <code>SYS_EREMCHG = 78;</code>
     *
     * <pre>
     * Remote address changed
     * </pre>
     */
    SYS_EREMCHG(75, 78),
    /**
     * <code>SYS_ELIBACC = 79;</code>
     *
     * <pre>
     * Can not access a needed shared library
     * </pre>
     */
    SYS_ELIBACC(76, 79),
    /**
     * <code>SYS_ELIBBAD = 80;</code>
     *
     * <pre>
     * Accessing a corrupted shared library
     * </pre>
     */
    SYS_ELIBBAD(77, 80),
    /**
     * <code>SYS_ELIBSCN = 81;</code>
     *
     * <pre>
     * .lib section in a.out corrupted
     * </pre>
     */
    SYS_ELIBSCN(78, 81),
    /**
     * <code>SYS_ELIBMAX = 82;</code>
     *
     * <pre>
     * Attempting to link in too many shared libraries
     * </pre>
     */
    SYS_ELIBMAX(79, 82),
    /**
     * <code>SYS_ELIBEXEC = 83;</code>
     *
     * <pre>
     * Cannot exec a shared library directly
     * </pre>
     */
    SYS_ELIBEXEC(80, 83),
    /**
     * <code>SYS_EILSEQ = 84;</code>
     *
     * <pre>
     * Illegal byte sequence
     * </pre>
     */
    SYS_EILSEQ(81, 84),
    /**
     * <code>SYS_ERESTART = 85;</code>
     *
     * <pre>
     * Interrupted system call should be restarted
     * </pre>
     */
    SYS_ERESTART(82, 85),
    /**
     * <code>SYS_ESTRPIPE = 86;</code>
     *
     * <pre>
     * Streams pipe error
     * </pre>
     */
    SYS_ESTRPIPE(83, 86),
    /**
     * <code>SYS_EUSERS = 87;</code>
     *
     * <pre>
     * Too many users
     * </pre>
     */
    SYS_EUSERS(84, 87),
    /**
     * <code>SYS_ENOTSOCK = 88;</code>
     *
     * <pre>
     * Socket operation on non-socket
     * </pre>
     */
    SYS_ENOTSOCK(85, 88),
    /**
     * <code>SYS_EDESTADDRREQ = 89;</code>
     *
     * <pre>
     * Destination address required
     * </pre>
     */
    SYS_EDESTADDRREQ(86, 89),
    /**
     * <code>SYS_EMSGSIZE = 90;</code>
     *
     * <pre>
     * Message too long
     * </pre>
     */
    SYS_EMSGSIZE(87, 90),
    /**
     * <code>SYS_EPROTOTYPE = 91;</code>
     *
     * <pre>
     * Protocol wrong type for socket
     * </pre>
     */
    SYS_EPROTOTYPE(88, 91),
    /**
     * <code>SYS_ENOPROTOOPT = 92;</code>
     *
     * <pre>
     * Protocol not available
     * </pre>
     */
    SYS_ENOPROTOOPT(89, 92),
    /**
     * <code>SYS_EPROTONOSUPPORT = 93;</code>
     *
     * <pre>
     * Protocol not supported
     * </pre>
     */
    SYS_EPROTONOSUPPORT(90, 93),
    /**
     * <code>SYS_ESOCKTNOSUPPORT = 94;</code>
     *
     * <pre>
     * Socket type not supported
     * </pre>
     */
    SYS_ESOCKTNOSUPPORT(91, 94),
    /**
     * <code>SYS_EOPNOTSUPP = 95;</code>
     *
     * <pre>
     * Operation not supported on transport endpoint
     * </pre>
     */
    SYS_EOPNOTSUPP(92, 95),
    /**
     * <code>SYS_EPFNOSUPPORT = 96;</code>
     *
     * <pre>
     * Protocol family not supported
     * </pre>
     */
    SYS_EPFNOSUPPORT(93, 96),
    /**
     * <code>SYS_EAFNOSUPPORT = 97;</code>
     *
     * <pre>
     * Address family not supported by protocol
     * </pre>
     */
    SYS_EAFNOSUPPORT(94, 97),
    /**
     * <code>SYS_EADDRINUSE = 98;</code>
     *
     * <pre>
     * Address already in use
     * </pre>
     */
    SYS_EADDRINUSE(95, 98),
    /**
     * <code>SYS_EADDRNOTAVAIL = 99;</code>
     *
     * <pre>
     * Cannot assign requested address
     * </pre>
     */
    SYS_EADDRNOTAVAIL(96, 99),
    /**
     * <code>SYS_ENETDOWN = 100;</code>
     *
     * <pre>
     * Network is down
     * </pre>
     */
    SYS_ENETDOWN(97, 100),
    /**
     * <code>SYS_ENETUNREACH = 101;</code>
     *
     * <pre>
     * Network is unreachable
     * </pre>
     */
    SYS_ENETUNREACH(98, 101),
    /**
     * <code>SYS_ENETRESET = 102;</code>
     *
     * <pre>
     * Network dropped connection because of reset
     * </pre>
     */
    SYS_ENETRESET(99, 102),
    /**
     * <code>SYS_ECONNABORTED = 103;</code>
     *
     * <pre>
     * Software caused connection abort
     * </pre>
     */
    SYS_ECONNABORTED(100, 103),
    /**
     * <code>SYS_ECONNRESET = 104;</code>
     *
     * <pre>
     * Connection reset by peer
     * </pre>
     */
    SYS_ECONNRESET(101, 104),
    /**
     * <code>SYS_ENOBUFS = 105;</code>
     *
     * <pre>
     * No buffer space available
     * </pre>
     */
    SYS_ENOBUFS(102, 105),
    /**
     * <code>SYS_EISCONN = 106;</code>
     *
     * <pre>
     * Transport endpoint is already connected
     * </pre>
     */
    SYS_EISCONN(103, 106),
    /**
     * <code>SYS_ENOTCONN = 107;</code>
     *
     * <pre>
     * Transport endpoint is not connected
     * </pre>
     */
    SYS_ENOTCONN(104, 107),
    /**
     * <code>SYS_ESHUTDOWN = 108;</code>
     *
     * <pre>
     * Cannot send after transport endpoint shutdown
     * </pre>
     */
    SYS_ESHUTDOWN(105, 108),
    /**
     * <code>SYS_ETOOMANYREFS = 109;</code>
     *
     * <pre>
     * Too many references: cannot splice
     * </pre>
     */
    SYS_ETOOMANYREFS(106, 109),
    /**
     * <code>SYS_ETIMEDOUT = 110;</code>
     *
     * <pre>
     * Connection timed out. NOTE: RPC timeout is ERPCTIMEDOUT.
     * </pre>
     */
    SYS_ETIMEDOUT(107, 110),
    /**
     * <code>SYS_ECONNREFUSED = 111;</code>
     *
     * <pre>
     * Connection refused
     * </pre>
     */
    SYS_ECONNREFUSED(108, 111),
    /**
     * <code>SYS_EHOSTDOWN = 112;</code>
     *
     * <pre>
     * Host is down
     * </pre>
     */
    SYS_EHOSTDOWN(109, 112),
    /**
     * <code>SYS_EHOSTUNREACH = 113;</code>
     *
     * <pre>
     * No route to host
     * </pre>
     */
    SYS_EHOSTUNREACH(110, 113),
    /**
     * <code>SYS_EALREADY = 114;</code>
     *
     * <pre>
     * Operation already in progress
     * </pre>
     */
    SYS_EALREADY(111, 114),
    /**
     * <code>SYS_EINPROGRESS = 115;</code>
     *
     * <pre>
     * Operation now in progress
     * </pre>
     */
    SYS_EINPROGRESS(112, 115),
    /**
     * <code>SYS_ESTALE = 116;</code>
     *
     * <pre>
     * Stale NFS file handle
     * </pre>
     */
    SYS_ESTALE(113, 116),
    /**
     * <code>SYS_EUCLEAN = 117;</code>
     *
     * <pre>
     * Structure needs cleaning
     * </pre>
     */
    SYS_EUCLEAN(114, 117),
    /**
     * <code>SYS_ENOTNAM = 118;</code>
     *
     * <pre>
     * Not a XENIX named type file
     * </pre>
     */
    SYS_ENOTNAM(115, 118),
    /**
     * <code>SYS_ENAVAIL = 119;</code>
     *
     * <pre>
     * No XENIX semaphores available
     * </pre>
     */
    SYS_ENAVAIL(116, 119),
    /**
     * <code>SYS_EISNAM = 120;</code>
     *
     * <pre>
     * Is a named type file
     * </pre>
     */
    SYS_EISNAM(117, 120),
    /**
     * <code>SYS_EREMOTEIO = 121;</code>
     *
     * <pre>
     * Remote I/O error
     * </pre>
     */
    SYS_EREMOTEIO(118, 121),
    /**
     * <code>SYS_EDQUOT = 122;</code>
     *
     * <pre>
     * Quota exceeded
     * </pre>
     */
    SYS_EDQUOT(119, 122),
    /**
     * <code>SYS_ENOMEDIUM = 123;</code>
     *
     * <pre>
     * No medium found
     * </pre>
     */
    SYS_ENOMEDIUM(120, 123),
    /**
     * <code>SYS_EMEDIUMTYPE = 124;</code>
     *
     * <pre>
     * Wrong medium type
     * </pre>
     */
    SYS_EMEDIUMTYPE(121, 124),
    /**
     * <code>SYS_ECANCELED = 125;</code>
     *
     * <pre>
     * Operation Cancelled
     * </pre>
     */
    SYS_ECANCELED(122, 125),
    /**
     * <code>SYS_ENOKEY = 126;</code>
     *
     * <pre>
     * Required key not available
     * </pre>
     */
    SYS_ENOKEY(123, 126),
    /**
     * <code>SYS_EKEYEXPIRED = 127;</code>
     *
     * <pre>
     * Key has expired
     * </pre>
     */
    SYS_EKEYEXPIRED(124, 127),
    /**
     * <code>SYS_EKEYREVOKED = 128;</code>
     *
     * <pre>
     * Key has been revoked
     * </pre>
     */
    SYS_EKEYREVOKED(125, 128),
    /**
     * <code>SYS_EKEYREJECTED = 129;</code>
     *
     * <pre>
     * Key was rejected by service
     * </pre>
     */
    SYS_EKEYREJECTED(126, 129),
    /**
     * <code>ENOSERVICE = 1001;</code>
     *
     * <pre>
     * Errno caused by client
     * </pre>
     */
    ENOSERVICE(127, 1001),
    /**
     * <code>ENOMETHOD = 1002;</code>
     *
     * <pre>
     * Method not found
     * </pre>
     */
    ENOMETHOD(128, 1002),
    /**
     * <code>EREQUEST = 1003;</code>
     *
     * <pre>
     * Bad Request
     * </pre>
     */
    EREQUEST(129, 1003),
    /**
     * <code>EAUTH = 1004;</code>
     *
     * <pre>
     * Unauthorized
     * </pre>
     */
    EAUTH(130, 1004),
    /**
     * <code>ETOOMANYFAILS = 1005;</code>
     *
     * <pre>
     * Too many sub calls failed
     * </pre>
     */
    ETOOMANYFAILS(131, 1005),
    /**
     * <code>EPCHANFINISH = 1006;</code>
     *
     * <pre>
     * [Internal] ParallelChannel finished
     * </pre>
     */
    EPCHANFINISH(132, 1006),
    /**
     * <code>EBACKUPREQUEST = 1007;</code>
     *
     * <pre>
     * Sending backup request
     * </pre>
     */
    EBACKUPREQUEST(133, 1007),
    /**
     * <code>ERPCTIMEDOUT = 1008;</code>
     *
     * <pre>
     * RPC call is timed out
     * </pre>
     */
    ERPCTIMEDOUT(134, 1008),
    /**
     * <code>EFAILEDSOCKET = 1009;</code>
     *
     * <pre>
     * Broken socket
     * </pre>
     */
    EFAILEDSOCKET(135, 1009),
    /**
     * <code>EHTTP = 1010;</code>
     *
     * <pre>
     * Bad http call
     * </pre>
     */
    EHTTP(136, 1010),
    /**
     * <code>EOVERCROWDED = 1011;</code>
     *
     * <pre>
     * The server is overcrowded
     * </pre>
     */
    EOVERCROWDED(137, 1011),
    /**
     * <code>ERTMPPUBLISHABLE = 1012;</code>
     *
     * <pre>
     * RtmpRetryingClientStream is publishable
     * </pre>
     */
    ERTMPPUBLISHABLE(138, 1012),
    /**
     * <code>ERTMPCREATESTREAM = 1013;</code>
     *
     * <pre>
     * createStream was rejected by the RTMP server
     * </pre>
     */
    ERTMPCREATESTREAM(139, 1013),
    /**
     * <code>EEOF = 1014;</code>
     *
     * <pre>
     * Got EOF
     * </pre>
     */
    EEOF(140, 1014),
    /**
     * <code>EUNUSED = 1015;</code>
     *
     * <pre>
     * The socket was not needed
     * </pre>
     */
    EUNUSED(141, 1015),
    /**
     * <code>EINTERNAL = 2001;</code>
     *
     * <pre>
     * Errno caused by server
     * </pre>
     */
    EINTERNAL(142, 2001),
    /**
     * <code>ERESPONSE = 2002;</code>
     *
     * <pre>
     * Bad Response
     * </pre>
     */
    ERESPONSE(143, 2002),
    /**
     * <code>ELOGOFF = 2003;</code>
     *
     * <pre>
     * Server is stopping
     * </pre>
     */
    ELOGOFF(144, 2003),
    /**
     * <code>ELIMIT = 2004;</code>
     *
     * <pre>
     * Reached server's limit on resources
     * </pre>
     */
    ELIMIT(145, 2004),
    /**
     * <code>ECLOSE = 2005;</code>
     *
     * <pre>
     * Close socket initiatively
     * </pre>
     */
    ECLOSE(146, 2005),
    /**
     * <code>EITP = 2006;</code>
     *
     * <pre>
     * Failed Itp response
     * </pre>
     */
    EITP(147, 2006),
    ;

    /**
     * <code>SYS_EPERM = 1;</code>
     *
     * <pre>
     * option allow_alias = false; this option is available since 2.5.0
     * Linux system errno are prefixed with SYS_.
     * Since sometimes linux errno such as ENOMEM and ETIMEDOUT is set or
     * checked by some other libaries which are out of control by RPC framework,
     * it's important to make sure that the explanation of an errno is exactly
     * the same in both client-side and server-side. If linux errno is unware
     * (e.g. in JAVA program), it's required to use SYS_*.
     * </pre>
     */
    public static final int SYS_EPERM_VALUE = 1;
    /**
     * <code>SYS_ENOENT = 2;</code>
     *
     * <pre>
     * No such file or directory
     * </pre>
     */
    public static final int SYS_ENOENT_VALUE = 2;
    /**
     * <code>SYS_ESRCH = 3;</code>
     *
     * <pre>
     * No such process
     * </pre>
     */
    public static final int SYS_ESRCH_VALUE = 3;
    /**
     * <code>SYS_EINTR = 4;</code>
     *
     * <pre>
     * Interrupted system call
     * </pre>
     */
    public static final int SYS_EINTR_VALUE = 4;
    /**
     * <code>SYS_EIO = 5;</code>
     *
     * <pre>
     * I/O error
     * </pre>
     */
    public static final int SYS_EIO_VALUE = 5;
    /**
     * <code>SYS_ENXIO = 6;</code>
     *
     * <pre>
     * No such device or address
     * </pre>
     */
    public static final int SYS_ENXIO_VALUE = 6;
    /**
     * <code>SYS_E2BIG = 7;</code>
     *
     * <pre>
     * Arg list too long
     * </pre>
     */
    public static final int SYS_E2BIG_VALUE = 7;
    /**
     * <code>SYS_ENOEXEC = 8;</code>
     *
     * <pre>
     * Exec format error
     * </pre>
     */
    public static final int SYS_ENOEXEC_VALUE = 8;
    /**
     * <code>SYS_EBADF = 9;</code>
     *
     * <pre>
     * Bad file number
     * </pre>
     */
    public static final int SYS_EBADF_VALUE = 9;
    /**
     * <code>SYS_ECHILD = 10;</code>
     *
     * <pre>
     * No child processes
     * </pre>
     */
    public static final int SYS_ECHILD_VALUE = 10;
    /**
     * <code>SYS_EAGAIN = 11;</code>
     *
     * <pre>
     * Try again
     * </pre>
     */
    public static final int SYS_EAGAIN_VALUE = 11;
    /**
     * <code>SYS_ENOMEM = 12;</code>
     *
     * <pre>
     * Out of memory
     * </pre>
     */
    public static final int SYS_ENOMEM_VALUE = 12;
    /**
     * <code>SYS_EACCES = 13;</code>
     *
     * <pre>
     * Permission denied
     * </pre>
     */
    public static final int SYS_EACCES_VALUE = 13;
    /**
     * <code>SYS_EFAULT = 14;</code>
     *
     * <pre>
     * Bad address
     * </pre>
     */
    public static final int SYS_EFAULT_VALUE = 14;
    /**
     * <code>SYS_ENOTBLK = 15;</code>
     *
     * <pre>
     * Block device required
     * </pre>
     */
    public static final int SYS_ENOTBLK_VALUE = 15;
    /**
     * <code>SYS_EBUSY = 16;</code>
     *
     * <pre>
     * Device or resource busy
     * </pre>
     */
    public static final int SYS_EBUSY_VALUE = 16;
    /**
     * <code>SYS_EEXIST = 17;</code>
     *
     * <pre>
     * File exists
     * </pre>
     */
    public static final int SYS_EEXIST_VALUE = 17;
    /**
     * <code>SYS_EXDEV = 18;</code>
     *
     * <pre>
     * Cross-device link
     * </pre>
     */
    public static final int SYS_EXDEV_VALUE = 18;
    /**
     * <code>SYS_ENODEV = 19;</code>
     *
     * <pre>
     * No such device
     * </pre>
     */
    public static final int SYS_ENODEV_VALUE = 19;
    /**
     * <code>SYS_ENOTDIR = 20;</code>
     *
     * <pre>
     * Not a directory
     * </pre>
     */
    public static final int SYS_ENOTDIR_VALUE = 20;
    /**
     * <code>SYS_EISDIR = 21;</code>
     *
     * <pre>
     * Is a directory
     * </pre>
     */
    public static final int SYS_EISDIR_VALUE = 21;
    /**
     * <code>SYS_EINVAL = 22;</code>
     *
     * <pre>
     * Invalid argument
     * </pre>
     */
    public static final int SYS_EINVAL_VALUE = 22;
    /**
     * <code>SYS_ENFILE = 23;</code>
     *
     * <pre>
     * File table overflow
     * </pre>
     */
    public static final int SYS_ENFILE_VALUE = 23;
    /**
     * <code>SYS_EMFILE = 24;</code>
     *
     * <pre>
     * Too many open files
     * </pre>
     */
    public static final int SYS_EMFILE_VALUE = 24;
    /**
     * <code>SYS_ENOTTY = 25;</code>
     *
     * <pre>
     * Not a typewriter
     * </pre>
     */
    public static final int SYS_ENOTTY_VALUE = 25;
    /**
     * <code>SYS_ETXTBSY = 26;</code>
     *
     * <pre>
     * Text file busy
     * </pre>
     */
    public static final int SYS_ETXTBSY_VALUE = 26;
    /**
     * <code>SYS_EFBIG = 27;</code>
     *
     * <pre>
     * File too large
     * </pre>
     */
    public static final int SYS_EFBIG_VALUE = 27;
    /**
     * <code>SYS_ENOSPC = 28;</code>
     *
     * <pre>
     * No space left on device
     * </pre>
     */
    public static final int SYS_ENOSPC_VALUE = 28;
    /**
     * <code>SYS_ESPIPE = 29;</code>
     *
     * <pre>
     * Illegal seek
     * </pre>
     */
    public static final int SYS_ESPIPE_VALUE = 29;
    /**
     * <code>SYS_EROFS = 30;</code>
     *
     * <pre>
     * Read-only file system
     * </pre>
     */
    public static final int SYS_EROFS_VALUE = 30;
    /**
     * <code>SYS_EMLINK = 31;</code>
     *
     * <pre>
     * Too many links
     * </pre>
     */
    public static final int SYS_EMLINK_VALUE = 31;
    /**
     * <code>SYS_EPIPE = 32;</code>
     *
     * <pre>
     * Broken pipe
     * </pre>
     */
    public static final int SYS_EPIPE_VALUE = 32;
    /**
     * <code>SYS_EDOM = 33;</code>
     *
     * <pre>
     * Math argument out of domain of func
     * </pre>
     */
    public static final int SYS_EDOM_VALUE = 33;
    /**
     * <code>SYS_ERANGE = 34;</code>
     *
     * <pre>
     * Math result not representable
     * </pre>
     */
    public static final int SYS_ERANGE_VALUE = 34;
    /**
     * <code>SYS_EDEADLK = 35;</code>
     *
     * <pre>
     * Resource deadlock would occur
     * </pre>
     */
    public static final int SYS_EDEADLK_VALUE = 35;
    /**
     * <code>SYS_ENAMETOOLONG = 36;</code>
     *
     * <pre>
     * File name too long
     * </pre>
     */
    public static final int SYS_ENAMETOOLONG_VALUE = 36;
    /**
     * <code>SYS_ENOLCK = 37;</code>
     *
     * <pre>
     * No record locks available
     * </pre>
     */
    public static final int SYS_ENOLCK_VALUE = 37;
    /**
     * <code>SYS_ENOSYS = 38;</code>
     *
     * <pre>
     * Function not implemented
     * </pre>
     */
    public static final int SYS_ENOSYS_VALUE = 38;
    /**
     * <code>SYS_ENOTEMPTY = 39;</code>
     *
     * <pre>
     * Directory not empty
     * </pre>
     */
    public static final int SYS_ENOTEMPTY_VALUE = 39;
    /**
     * <code>SYS_ELOOP = 40;</code>
     *
     * <pre>
     * Too many symbolic links encountered
     * </pre>
     */
    public static final int SYS_ELOOP_VALUE = 40;
    /**
     * <code>SYS_ENOMSG = 42;</code>
     *
     * <pre>
     * No message of desired type
     * </pre>
     */
    public static final int SYS_ENOMSG_VALUE = 42;
    /**
     * <code>SYS_EIDRM = 43;</code>
     *
     * <pre>
     * Identifier removed
     * </pre>
     */
    public static final int SYS_EIDRM_VALUE = 43;
    /**
     * <code>SYS_ECHRNG = 44;</code>
     *
     * <pre>
     * Channel number out of range
     * </pre>
     */
    public static final int SYS_ECHRNG_VALUE = 44;
    /**
     * <code>SYS_EL2NSYNC = 45;</code>
     *
     * <pre>
     * Level= 2;not synchronized
     * </pre>
     */
    public static final int SYS_EL2NSYNC_VALUE = 45;
    /**
     * <code>SYS_EL3HLT = 46;</code>
     *
     * <pre>
     * Level= 3;halted
     * </pre>
     */
    public static final int SYS_EL3HLT_VALUE = 46;
    /**
     * <code>SYS_EL3RST = 47;</code>
     *
     * <pre>
     * Level= 3;reset
     * </pre>
     */
    public static final int SYS_EL3RST_VALUE = 47;
    /**
     * <code>SYS_ELNRNG = 48;</code>
     *
     * <pre>
     * Link number out of range
     * </pre>
     */
    public static final int SYS_ELNRNG_VALUE = 48;
    /**
     * <code>SYS_EUNATCH = 49;</code>
     *
     * <pre>
     * Protocol driver not attached
     * </pre>
     */
    public static final int SYS_EUNATCH_VALUE = 49;
    /**
     * <code>SYS_ENOCSI = 50;</code>
     *
     * <pre>
     * No CSI structure available
     * </pre>
     */
    public static final int SYS_ENOCSI_VALUE = 50;
    /**
     * <code>SYS_EL2HLT = 51;</code>
     *
     * <pre>
     * Level= 2;halted
     * </pre>
     */
    public static final int SYS_EL2HLT_VALUE = 51;
    /**
     * <code>SYS_EBADE = 52;</code>
     *
     * <pre>
     * Invalid exchange
     * </pre>
     */
    public static final int SYS_EBADE_VALUE = 52;
    /**
     * <code>SYS_EBADR = 53;</code>
     *
     * <pre>
     * Invalid request descriptor
     * </pre>
     */
    public static final int SYS_EBADR_VALUE = 53;
    /**
     * <code>SYS_EXFULL = 54;</code>
     *
     * <pre>
     * Exchange full
     * </pre>
     */
    public static final int SYS_EXFULL_VALUE = 54;
    /**
     * <code>SYS_ENOANO = 55;</code>
     *
     * <pre>
     * No anode
     * </pre>
     */
    public static final int SYS_ENOANO_VALUE = 55;
    /**
     * <code>SYS_EBADRQC = 56;</code>
     *
     * <pre>
     * Invalid request code
     * </pre>
     */
    public static final int SYS_EBADRQC_VALUE = 56;
    /**
     * <code>SYS_EBADSLT = 57;</code>
     *
     * <pre>
     * Invalid slot
     * </pre>
     */
    public static final int SYS_EBADSLT_VALUE = 57;
    /**
     * <code>SYS_EBFONT = 59;</code>
     *
     * <pre>
     * Bad font file format
     * </pre>
     */
    public static final int SYS_EBFONT_VALUE = 59;
    /**
     * <code>SYS_ENOSTR = 60;</code>
     *
     * <pre>
     * Device not a stream
     * </pre>
     */
    public static final int SYS_ENOSTR_VALUE = 60;
    /**
     * <code>SYS_ENODATA = 61;</code>
     *
     * <pre>
     * No data available
     * </pre>
     */
    public static final int SYS_ENODATA_VALUE = 61;
    /**
     * <code>SYS_ETIME = 62;</code>
     *
     * <pre>
     * Timer expired
     * </pre>
     */
    public static final int SYS_ETIME_VALUE = 62;
    /**
     * <code>SYS_ENOSR = 63;</code>
     *
     * <pre>
     * Out of streams resources
     * </pre>
     */
    public static final int SYS_ENOSR_VALUE = 63;
    /**
     * <code>SYS_ENONET = 64;</code>
     *
     * <pre>
     * Machine is not on the network
     * </pre>
     */
    public static final int SYS_ENONET_VALUE = 64;
    /**
     * <code>SYS_ENOPKG = 65;</code>
     *
     * <pre>
     * Package not installed
     * </pre>
     */
    public static final int SYS_ENOPKG_VALUE = 65;
    /**
     * <code>SYS_EREMOTE = 66;</code>
     *
     * <pre>
     * Object is remote
     * </pre>
     */
    public static final int SYS_EREMOTE_VALUE = 66;
    /**
     * <code>SYS_ENOLINK = 67;</code>
     *
     * <pre>
     * Link has been severed
     * </pre>
     */
    public static final int SYS_ENOLINK_VALUE = 67;
    /**
     * <code>SYS_EADV = 68;</code>
     *
     * <pre>
     * Advertise error
     * </pre>
     */
    public static final int SYS_EADV_VALUE = 68;
    /**
     * <code>SYS_ESRMNT = 69;</code>
     *
     * <pre>
     * Srmount error
     * </pre>
     */
    public static final int SYS_ESRMNT_VALUE = 69;
    /**
     * <code>SYS_ECOMM = 70;</code>
     *
     * <pre>
     * Communication error on send
     * </pre>
     */
    public static final int SYS_ECOMM_VALUE = 70;
    /**
     * <code>SYS_EPROTO = 71;</code>
     *
     * <pre>
     * Protocol error
     * </pre>
     */
    public static final int SYS_EPROTO_VALUE = 71;
    /**
     * <code>SYS_EMULTIHOP = 72;</code>
     *
     * <pre>
     * Multihop attempted
     * </pre>
     */
    public static final int SYS_EMULTIHOP_VALUE = 72;
    /**
     * <code>SYS_EDOTDOT = 73;</code>
     *
     * <pre>
     * RFS specific error
     * </pre>
     */
    public static final int SYS_EDOTDOT_VALUE = 73;
    /**
     * <code>SYS_EBADMSG = 74;</code>
     *
     * <pre>
     * Not a data message
     * </pre>
     */
    public static final int SYS_EBADMSG_VALUE = 74;
    /**
     * <code>SYS_EOVERFLOW = 75;</code>
     *
     * <pre>
     * Value too large for defined data type
     * </pre>
     */
    public static final int SYS_EOVERFLOW_VALUE = 75;
    /**
     * <code>SYS_ENOTUNIQ = 76;</code>
     *
     * <pre>
     * Name not unique on network
     * </pre>
     */
    public static final int SYS_ENOTUNIQ_VALUE = 76;
    /**
     * <code>SYS_EBADFD = 77;</code>
     *
     * <pre>
     * File descriptor in bad state
     * </pre>
     */
    public static final int SYS_EBADFD_VALUE = 77;
    /**
     * <code>SYS_EREMCHG = 78;</code>
     *
     * <pre>
     * Remote address changed
     * </pre>
     */
    public static final int SYS_EREMCHG_VALUE = 78;
    /**
     * <code>SYS_ELIBACC = 79;</code>
     *
     * <pre>
     * Can not access a needed shared library
     * </pre>
     */
    public static final int SYS_ELIBACC_VALUE = 79;
    /**
     * <code>SYS_ELIBBAD = 80;</code>
     *
     * <pre>
     * Accessing a corrupted shared library
     * </pre>
     */
    public static final int SYS_ELIBBAD_VALUE = 80;
    /**
     * <code>SYS_ELIBSCN = 81;</code>
     *
     * <pre>
     * .lib section in a.out corrupted
     * </pre>
     */
    public static final int SYS_ELIBSCN_VALUE = 81;
    /**
     * <code>SYS_ELIBMAX = 82;</code>
     *
     * <pre>
     * Attempting to link in too many shared libraries
     * </pre>
     */
    public static final int SYS_ELIBMAX_VALUE = 82;
    /**
     * <code>SYS_ELIBEXEC = 83;</code>
     *
     * <pre>
     * Cannot exec a shared library directly
     * </pre>
     */
    public static final int SYS_ELIBEXEC_VALUE = 83;
    /**
     * <code>SYS_EILSEQ = 84;</code>
     *
     * <pre>
     * Illegal byte sequence
     * </pre>
     */
    public static final int SYS_EILSEQ_VALUE = 84;
    /**
     * <code>SYS_ERESTART = 85;</code>
     *
     * <pre>
     * Interrupted system call should be restarted
     * </pre>
     */
    public static final int SYS_ERESTART_VALUE = 85;
    /**
     * <code>SYS_ESTRPIPE = 86;</code>
     *
     * <pre>
     * Streams pipe error
     * </pre>
     */
    public static final int SYS_ESTRPIPE_VALUE = 86;
    /**
     * <code>SYS_EUSERS = 87;</code>
     *
     * <pre>
     * Too many users
     * </pre>
     */
    public static final int SYS_EUSERS_VALUE = 87;
    /**
     * <code>SYS_ENOTSOCK = 88;</code>
     *
     * <pre>
     * Socket operation on non-socket
     * </pre>
     */
    public static final int SYS_ENOTSOCK_VALUE = 88;
    /**
     * <code>SYS_EDESTADDRREQ = 89;</code>
     *
     * <pre>
     * Destination address required
     * </pre>
     */
    public static final int SYS_EDESTADDRREQ_VALUE = 89;
    /**
     * <code>SYS_EMSGSIZE = 90;</code>
     *
     * <pre>
     * Message too long
     * </pre>
     */
    public static final int SYS_EMSGSIZE_VALUE = 90;
    /**
     * <code>SYS_EPROTOTYPE = 91;</code>
     *
     * <pre>
     * Protocol wrong type for socket
     * </pre>
     */
    public static final int SYS_EPROTOTYPE_VALUE = 91;
    /**
     * <code>SYS_ENOPROTOOPT = 92;</code>
     *
     * <pre>
     * Protocol not available
     * </pre>
     */
    public static final int SYS_ENOPROTOOPT_VALUE = 92;
    /**
     * <code>SYS_EPROTONOSUPPORT = 93;</code>
     *
     * <pre>
     * Protocol not supported
     * </pre>
     */
    public static final int SYS_EPROTONOSUPPORT_VALUE = 93;
    /**
     * <code>SYS_ESOCKTNOSUPPORT = 94;</code>
     *
     * <pre>
     * Socket type not supported
     * </pre>
     */
    public static final int SYS_ESOCKTNOSUPPORT_VALUE = 94;
    /**
     * <code>SYS_EOPNOTSUPP = 95;</code>
     *
     * <pre>
     * Operation not supported on transport endpoint
     * </pre>
     */
    public static final int SYS_EOPNOTSUPP_VALUE = 95;
    /**
     * <code>SYS_EPFNOSUPPORT = 96;</code>
     *
     * <pre>
     * Protocol family not supported
     * </pre>
     */
    public static final int SYS_EPFNOSUPPORT_VALUE = 96;
    /**
     * <code>SYS_EAFNOSUPPORT = 97;</code>
     *
     * <pre>
     * Address family not supported by protocol
     * </pre>
     */
    public static final int SYS_EAFNOSUPPORT_VALUE = 97;
    /**
     * <code>SYS_EADDRINUSE = 98;</code>
     *
     * <pre>
     * Address already in use
     * </pre>
     */
    public static final int SYS_EADDRINUSE_VALUE = 98;
    /**
     * <code>SYS_EADDRNOTAVAIL = 99;</code>
     *
     * <pre>
     * Cannot assign requested address
     * </pre>
     */
    public static final int SYS_EADDRNOTAVAIL_VALUE = 99;
    /**
     * <code>SYS_ENETDOWN = 100;</code>
     *
     * <pre>
     * Network is down
     * </pre>
     */
    public static final int SYS_ENETDOWN_VALUE = 100;
    /**
     * <code>SYS_ENETUNREACH = 101;</code>
     *
     * <pre>
     * Network is unreachable
     * </pre>
     */
    public static final int SYS_ENETUNREACH_VALUE = 101;
    /**
     * <code>SYS_ENETRESET = 102;</code>
     *
     * <pre>
     * Network dropped connection because of reset
     * </pre>
     */
    public static final int SYS_ENETRESET_VALUE = 102;
    /**
     * <code>SYS_ECONNABORTED = 103;</code>
     *
     * <pre>
     * Software caused connection abort
     * </pre>
     */
    public static final int SYS_ECONNABORTED_VALUE = 103;
    /**
     * <code>SYS_ECONNRESET = 104;</code>
     *
     * <pre>
     * Connection reset by peer
     * </pre>
     */
    public static final int SYS_ECONNRESET_VALUE = 104;
    /**
     * <code>SYS_ENOBUFS = 105;</code>
     *
     * <pre>
     * No buffer space available
     * </pre>
     */
    public static final int SYS_ENOBUFS_VALUE = 105;
    /**
     * <code>SYS_EISCONN = 106;</code>
     *
     * <pre>
     * Transport endpoint is already connected
     * </pre>
     */
    public static final int SYS_EISCONN_VALUE = 106;
    /**
     * <code>SYS_ENOTCONN = 107;</code>
     *
     * <pre>
     * Transport endpoint is not connected
     * </pre>
     */
    public static final int SYS_ENOTCONN_VALUE = 107;
    /**
     * <code>SYS_ESHUTDOWN = 108;</code>
     *
     * <pre>
     * Cannot send after transport endpoint shutdown
     * </pre>
     */
    public static final int SYS_ESHUTDOWN_VALUE = 108;
    /**
     * <code>SYS_ETOOMANYREFS = 109;</code>
     *
     * <pre>
     * Too many references: cannot splice
     * </pre>
     */
    public static final int SYS_ETOOMANYREFS_VALUE = 109;
    /**
     * <code>SYS_ETIMEDOUT = 110;</code>
     *
     * <pre>
     * Connection timed out. NOTE: RPC timeout is ERPCTIMEDOUT.
     * </pre>
     */
    public static final int SYS_ETIMEDOUT_VALUE = 110;
    /**
     * <code>SYS_ECONNREFUSED = 111;</code>
     *
     * <pre>
     * Connection refused
     * </pre>
     */
    public static final int SYS_ECONNREFUSED_VALUE = 111;
    /**
     * <code>SYS_EHOSTDOWN = 112;</code>
     *
     * <pre>
     * Host is down
     * </pre>
     */
    public static final int SYS_EHOSTDOWN_VALUE = 112;
    /**
     * <code>SYS_EHOSTUNREACH = 113;</code>
     *
     * <pre>
     * No route to host
     * </pre>
     */
    public static final int SYS_EHOSTUNREACH_VALUE = 113;
    /**
     * <code>SYS_EALREADY = 114;</code>
     *
     * <pre>
     * Operation already in progress
     * </pre>
     */
    public static final int SYS_EALREADY_VALUE = 114;
    /**
     * <code>SYS_EINPROGRESS = 115;</code>
     *
     * <pre>
     * Operation now in progress
     * </pre>
     */
    public static final int SYS_EINPROGRESS_VALUE = 115;
    /**
     * <code>SYS_ESTALE = 116;</code>
     *
     * <pre>
     * Stale NFS file handle
     * </pre>
     */
    public static final int SYS_ESTALE_VALUE = 116;
    /**
     * <code>SYS_EUCLEAN = 117;</code>
     *
     * <pre>
     * Structure needs cleaning
     * </pre>
     */
    public static final int SYS_EUCLEAN_VALUE = 117;
    /**
     * <code>SYS_ENOTNAM = 118;</code>
     *
     * <pre>
     * Not a XENIX named type file
     * </pre>
     */
    public static final int SYS_ENOTNAM_VALUE = 118;
    /**
     * <code>SYS_ENAVAIL = 119;</code>
     *
     * <pre>
     * No XENIX semaphores available
     * </pre>
     */
    public static final int SYS_ENAVAIL_VALUE = 119;
    /**
     * <code>SYS_EISNAM = 120;</code>
     *
     * <pre>
     * Is a named type file
     * </pre>
     */
    public static final int SYS_EISNAM_VALUE = 120;
    /**
     * <code>SYS_EREMOTEIO = 121;</code>
     *
     * <pre>
     * Remote I/O error
     * </pre>
     */
    public static final int SYS_EREMOTEIO_VALUE = 121;
    /**
     * <code>SYS_EDQUOT = 122;</code>
     *
     * <pre>
     * Quota exceeded
     * </pre>
     */
    public static final int SYS_EDQUOT_VALUE = 122;
    /**
     * <code>SYS_ENOMEDIUM = 123;</code>
     *
     * <pre>
     * No medium found
     * </pre>
     */
    public static final int SYS_ENOMEDIUM_VALUE = 123;
    /**
     * <code>SYS_EMEDIUMTYPE = 124;</code>
     *
     * <pre>
     * Wrong medium type
     * </pre>
     */
    public static final int SYS_EMEDIUMTYPE_VALUE = 124;
    /**
     * <code>SYS_ECANCELED = 125;</code>
     *
     * <pre>
     * Operation Cancelled
     * </pre>
     */
    public static final int SYS_ECANCELED_VALUE = 125;
    /**
     * <code>SYS_ENOKEY = 126;</code>
     *
     * <pre>
     * Required key not available
     * </pre>
     */
    public static final int SYS_ENOKEY_VALUE = 126;
    /**
     * <code>SYS_EKEYEXPIRED = 127;</code>
     *
     * <pre>
     * Key has expired
     * </pre>
     */
    public static final int SYS_EKEYEXPIRED_VALUE = 127;
    /**
     * <code>SYS_EKEYREVOKED = 128;</code>
     *
     * <pre>
     * Key has been revoked
     * </pre>
     */
    public static final int SYS_EKEYREVOKED_VALUE = 128;
    /**
     * <code>SYS_EKEYREJECTED = 129;</code>
     *
     * <pre>
     * Key was rejected by service
     * </pre>
     */
    public static final int SYS_EKEYREJECTED_VALUE = 129;
    /**
     * <code>ENOSERVICE = 1001;</code>
     *
     * <pre>
     * Errno caused by client
     * </pre>
     */
    public static final int ENOSERVICE_VALUE = 1001;
    /**
     * <code>ENOMETHOD = 1002;</code>
     *
     * <pre>
     * Method not found
     * </pre>
     */
    public static final int ENOMETHOD_VALUE = 1002;
    /**
     * <code>EREQUEST = 1003;</code>
     *
     * <pre>
     * Bad Request
     * </pre>
     */
    public static final int EREQUEST_VALUE = 1003;
    /**
     * <code>EAUTH = 1004;</code>
     *
     * <pre>
     * Unauthorized
     * </pre>
     */
    public static final int EAUTH_VALUE = 1004;
    /**
     * <code>ETOOMANYFAILS = 1005;</code>
     *
     * <pre>
     * Too many sub calls failed
     * </pre>
     */
    public static final int ETOOMANYFAILS_VALUE = 1005;
    /**
     * <code>EPCHANFINISH = 1006;</code>
     *
     * <pre>
     * [Internal] ParallelChannel finished
     * </pre>
     */
    public static final int EPCHANFINISH_VALUE = 1006;
    /**
     * <code>EBACKUPREQUEST = 1007;</code>
     *
     * <pre>
     * Sending backup request
     * </pre>
     */
    public static final int EBACKUPREQUEST_VALUE = 1007;
    /**
     * <code>ERPCTIMEDOUT = 1008;</code>
     *
     * <pre>
     * RPC call is timed out
     * </pre>
     */
    public static final int ERPCTIMEDOUT_VALUE = 1008;
    /**
     * <code>EFAILEDSOCKET = 1009;</code>
     *
     * <pre>
     * Broken socket
     * </pre>
     */
    public static final int EFAILEDSOCKET_VALUE = 1009;
    /**
     * <code>EHTTP = 1010;</code>
     *
     * <pre>
     * Bad http call
     * </pre>
     */
    public static final int EHTTP_VALUE = 1010;
    /**
     * <code>EOVERCROWDED = 1011;</code>
     *
     * <pre>
     * The server is overcrowded
     * </pre>
     */
    public static final int EOVERCROWDED_VALUE = 1011;
    /**
     * <code>ERTMPPUBLISHABLE = 1012;</code>
     *
     * <pre>
     * RtmpRetryingClientStream is publishable
     * </pre>
     */
    public static final int ERTMPPUBLISHABLE_VALUE = 1012;
    /**
     * <code>ERTMPCREATESTREAM = 1013;</code>
     *
     * <pre>
     * createStream was rejected by the RTMP server
     * </pre>
     */
    public static final int ERTMPCREATESTREAM_VALUE = 1013;
    /**
     * <code>EEOF = 1014;</code>
     *
     * <pre>
     * Got EOF
     * </pre>
     */
    public static final int EEOF_VALUE = 1014;
    /**
     * <code>EUNUSED = 1015;</code>
     *
     * <pre>
     * The socket was not needed
     * </pre>
     */
    public static final int EUNUSED_VALUE = 1015;
    /**
     * <code>EINTERNAL = 2001;</code>
     *
     * <pre>
     * Errno caused by server
     * </pre>
     */
    public static final int EINTERNAL_VALUE = 2001;
    /**
     * <code>ERESPONSE = 2002;</code>
     *
     * <pre>
     * Bad Response
     * </pre>
     */
    public static final int ERESPONSE_VALUE = 2002;
    /**
     * <code>ELOGOFF = 2003;</code>
     *
     * <pre>
     * Server is stopping
     * </pre>
     */
    public static final int ELOGOFF_VALUE = 2003;
    /**
     * <code>ELIMIT = 2004;</code>
     *
     * <pre>
     * Reached server's limit on resources
     * </pre>
     */
    public static final int ELIMIT_VALUE = 2004;
    /**
     * <code>ECLOSE = 2005;</code>
     *
     * <pre>
     * Close socket initiatively
     * </pre>
     */
    public static final int ECLOSE_VALUE = 2005;
    /**
     * <code>EITP = 2006;</code>
     *
     * <pre>
     * Failed Itp response
     * </pre>
     */
    public static final int EITP_VALUE = 2006;


    public final int getNumber() { return value; }

    public static Errno valueOf(int value) {
      switch (value) {
        case 1: return SYS_EPERM;
        case 2: return SYS_ENOENT;
        case 3: return SYS_ESRCH;
        case 4: return SYS_EINTR;
        case 5: return SYS_EIO;
        case 6: return SYS_ENXIO;
        case 7: return SYS_E2BIG;
        case 8: return SYS_ENOEXEC;
        case 9: return SYS_EBADF;
        case 10: return SYS_ECHILD;
        case 11: return SYS_EAGAIN;
        case 12: return SYS_ENOMEM;
        case 13: return SYS_EACCES;
        case 14: return SYS_EFAULT;
        case 15: return SYS_ENOTBLK;
        case 16: return SYS_EBUSY;
        case 17: return SYS_EEXIST;
        case 18: return SYS_EXDEV;
        case 19: return SYS_ENODEV;
        case 20: return SYS_ENOTDIR;
        case 21: return SYS_EISDIR;
        case 22: return SYS_EINVAL;
        case 23: return SYS_ENFILE;
        case 24: return SYS_EMFILE;
        case 25: return SYS_ENOTTY;
        case 26: return SYS_ETXTBSY;
        case 27: return SYS_EFBIG;
        case 28: return SYS_ENOSPC;
        case 29: return SYS_ESPIPE;
        case 30: return SYS_EROFS;
        case 31: return SYS_EMLINK;
        case 32: return SYS_EPIPE;
        case 33: return SYS_EDOM;
        case 34: return SYS_ERANGE;
        case 35: return SYS_EDEADLK;
        case 36: return SYS_ENAMETOOLONG;
        case 37: return SYS_ENOLCK;
        case 38: return SYS_ENOSYS;
        case 39: return SYS_ENOTEMPTY;
        case 40: return SYS_ELOOP;
        case 42: return SYS_ENOMSG;
        case 43: return SYS_EIDRM;
        case 44: return SYS_ECHRNG;
        case 45: return SYS_EL2NSYNC;
        case 46: return SYS_EL3HLT;
        case 47: return SYS_EL3RST;
        case 48: return SYS_ELNRNG;
        case 49: return SYS_EUNATCH;
        case 50: return SYS_ENOCSI;
        case 51: return SYS_EL2HLT;
        case 52: return SYS_EBADE;
        case 53: return SYS_EBADR;
        case 54: return SYS_EXFULL;
        case 55: return SYS_ENOANO;
        case 56: return SYS_EBADRQC;
        case 57: return SYS_EBADSLT;
        case 59: return SYS_EBFONT;
        case 60: return SYS_ENOSTR;
        case 61: return SYS_ENODATA;
        case 62: return SYS_ETIME;
        case 63: return SYS_ENOSR;
        case 64: return SYS_ENONET;
        case 65: return SYS_ENOPKG;
        case 66: return SYS_EREMOTE;
        case 67: return SYS_ENOLINK;
        case 68: return SYS_EADV;
        case 69: return SYS_ESRMNT;
        case 70: return SYS_ECOMM;
        case 71: return SYS_EPROTO;
        case 72: return SYS_EMULTIHOP;
        case 73: return SYS_EDOTDOT;
        case 74: return SYS_EBADMSG;
        case 75: return SYS_EOVERFLOW;
        case 76: return SYS_ENOTUNIQ;
        case 77: return SYS_EBADFD;
        case 78: return SYS_EREMCHG;
        case 79: return SYS_ELIBACC;
        case 80: return SYS_ELIBBAD;
        case 81: return SYS_ELIBSCN;
        case 82: return SYS_ELIBMAX;
        case 83: return SYS_ELIBEXEC;
        case 84: return SYS_EILSEQ;
        case 85: return SYS_ERESTART;
        case 86: return SYS_ESTRPIPE;
        case 87: return SYS_EUSERS;
        case 88: return SYS_ENOTSOCK;
        case 89: return SYS_EDESTADDRREQ;
        case 90: return SYS_EMSGSIZE;
        case 91: return SYS_EPROTOTYPE;
        case 92: return SYS_ENOPROTOOPT;
        case 93: return SYS_EPROTONOSUPPORT;
        case 94: return SYS_ESOCKTNOSUPPORT;
        case 95: return SYS_EOPNOTSUPP;
        case 96: return SYS_EPFNOSUPPORT;
        case 97: return SYS_EAFNOSUPPORT;
        case 98: return SYS_EADDRINUSE;
        case 99: return SYS_EADDRNOTAVAIL;
        case 100: return SYS_ENETDOWN;
        case 101: return SYS_ENETUNREACH;
        case 102: return SYS_ENETRESET;
        case 103: return SYS_ECONNABORTED;
        case 104: return SYS_ECONNRESET;
        case 105: return SYS_ENOBUFS;
        case 106: return SYS_EISCONN;
        case 107: return SYS_ENOTCONN;
        case 108: return SYS_ESHUTDOWN;
        case 109: return SYS_ETOOMANYREFS;
        case 110: return SYS_ETIMEDOUT;
        case 111: return SYS_ECONNREFUSED;
        case 112: return SYS_EHOSTDOWN;
        case 113: return SYS_EHOSTUNREACH;
        case 114: return SYS_EALREADY;
        case 115: return SYS_EINPROGRESS;
        case 116: return SYS_ESTALE;
        case 117: return SYS_EUCLEAN;
        case 118: return SYS_ENOTNAM;
        case 119: return SYS_ENAVAIL;
        case 120: return SYS_EISNAM;
        case 121: return SYS_EREMOTEIO;
        case 122: return SYS_EDQUOT;
        case 123: return SYS_ENOMEDIUM;
        case 124: return SYS_EMEDIUMTYPE;
        case 125: return SYS_ECANCELED;
        case 126: return SYS_ENOKEY;
        case 127: return SYS_EKEYEXPIRED;
        case 128: return SYS_EKEYREVOKED;
        case 129: return SYS_EKEYREJECTED;
        case 1001: return ENOSERVICE;
        case 1002: return ENOMETHOD;
        case 1003: return EREQUEST;
        case 1004: return EAUTH;
        case 1005: return ETOOMANYFAILS;
        case 1006: return EPCHANFINISH;
        case 1007: return EBACKUPREQUEST;
        case 1008: return ERPCTIMEDOUT;
        case 1009: return EFAILEDSOCKET;
        case 1010: return EHTTP;
        case 1011: return EOVERCROWDED;
        case 1012: return ERTMPPUBLISHABLE;
        case 1013: return ERTMPCREATESTREAM;
        case 1014: return EEOF;
        case 1015: return EUNUSED;
        case 2001: return EINTERNAL;
        case 2002: return ERESPONSE;
        case 2003: return ELOGOFF;
        case 2004: return ELIMIT;
        case 2005: return ECLOSE;
        case 2006: return EITP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Errno>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Errno>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Errno>() {
            public Errno findValueByNumber(int number) {
              return Errno.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.baidu.brpc.protocol.BaiduRpcErrno.getDescriptor().getEnumTypes().get(0);
    }

    private static final Errno[] VALUES = values();

    public static Errno valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Errno(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:brpc.Errno)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013errno.proto\022\004brpc*\377\023\n\005Errno\022\r\n\tSYS_EPE" +
      "RM\020\001\022\016\n\nSYS_ENOENT\020\002\022\r\n\tSYS_ESRCH\020\003\022\r\n\tS" +
      "YS_EINTR\020\004\022\013\n\007SYS_EIO\020\005\022\r\n\tSYS_ENXIO\020\006\022\r" +
      "\n\tSYS_E2BIG\020\007\022\017\n\013SYS_ENOEXEC\020\010\022\r\n\tSYS_EB" +
      "ADF\020\t\022\016\n\nSYS_ECHILD\020\n\022\016\n\nSYS_EAGAIN\020\013\022\016\n" +
      "\nSYS_ENOMEM\020\014\022\016\n\nSYS_EACCES\020\r\022\016\n\nSYS_EFA" +
      "ULT\020\016\022\017\n\013SYS_ENOTBLK\020\017\022\r\n\tSYS_EBUSY\020\020\022\016\n" +
      "\nSYS_EEXIST\020\021\022\r\n\tSYS_EXDEV\020\022\022\016\n\nSYS_ENOD" +
      "EV\020\023\022\017\n\013SYS_ENOTDIR\020\024\022\016\n\nSYS_EISDIR\020\025\022\016\n" +
      "\nSYS_EINVAL\020\026\022\016\n\nSYS_ENFILE\020\027\022\016\n\nSYS_EMF",
      "ILE\020\030\022\016\n\nSYS_ENOTTY\020\031\022\017\n\013SYS_ETXTBSY\020\032\022\r" +
      "\n\tSYS_EFBIG\020\033\022\016\n\nSYS_ENOSPC\020\034\022\016\n\nSYS_ESP" +
      "IPE\020\035\022\r\n\tSYS_EROFS\020\036\022\016\n\nSYS_EMLINK\020\037\022\r\n\t" +
      "SYS_EPIPE\020 \022\014\n\010SYS_EDOM\020!\022\016\n\nSYS_ERANGE\020" +
      "\"\022\017\n\013SYS_EDEADLK\020#\022\024\n\020SYS_ENAMETOOLONG\020$" +
      "\022\016\n\nSYS_ENOLCK\020%\022\016\n\nSYS_ENOSYS\020&\022\021\n\rSYS_" +
      "ENOTEMPTY\020\'\022\r\n\tSYS_ELOOP\020(\022\016\n\nSYS_ENOMSG" +
      "\020*\022\r\n\tSYS_EIDRM\020+\022\016\n\nSYS_ECHRNG\020,\022\020\n\014SYS" +
      "_EL2NSYNC\020-\022\016\n\nSYS_EL3HLT\020.\022\016\n\nSYS_EL3RS" +
      "T\020/\022\016\n\nSYS_ELNRNG\0200\022\017\n\013SYS_EUNATCH\0201\022\016\n\n",
      "SYS_ENOCSI\0202\022\016\n\nSYS_EL2HLT\0203\022\r\n\tSYS_EBAD" +
      "E\0204\022\r\n\tSYS_EBADR\0205\022\016\n\nSYS_EXFULL\0206\022\016\n\nSY" +
      "S_ENOANO\0207\022\017\n\013SYS_EBADRQC\0208\022\017\n\013SYS_EBADS" +
      "LT\0209\022\016\n\nSYS_EBFONT\020;\022\016\n\nSYS_ENOSTR\020<\022\017\n\013" +
      "SYS_ENODATA\020=\022\r\n\tSYS_ETIME\020>\022\r\n\tSYS_ENOS" +
      "R\020?\022\016\n\nSYS_ENONET\020@\022\016\n\nSYS_ENOPKG\020A\022\017\n\013S" +
      "YS_EREMOTE\020B\022\017\n\013SYS_ENOLINK\020C\022\014\n\010SYS_EAD" +
      "V\020D\022\016\n\nSYS_ESRMNT\020E\022\r\n\tSYS_ECOMM\020F\022\016\n\nSY" +
      "S_EPROTO\020G\022\021\n\rSYS_EMULTIHOP\020H\022\017\n\013SYS_EDO" +
      "TDOT\020I\022\017\n\013SYS_EBADMSG\020J\022\021\n\rSYS_EOVERFLOW",
      "\020K\022\020\n\014SYS_ENOTUNIQ\020L\022\016\n\nSYS_EBADFD\020M\022\017\n\013" +
      "SYS_EREMCHG\020N\022\017\n\013SYS_ELIBACC\020O\022\017\n\013SYS_EL" +
      "IBBAD\020P\022\017\n\013SYS_ELIBSCN\020Q\022\017\n\013SYS_ELIBMAX\020" +
      "R\022\020\n\014SYS_ELIBEXEC\020S\022\016\n\nSYS_EILSEQ\020T\022\020\n\014S" +
      "YS_ERESTART\020U\022\020\n\014SYS_ESTRPIPE\020V\022\016\n\nSYS_E" +
      "USERS\020W\022\020\n\014SYS_ENOTSOCK\020X\022\024\n\020SYS_EDESTAD" +
      "DRREQ\020Y\022\020\n\014SYS_EMSGSIZE\020Z\022\022\n\016SYS_EPROTOT" +
      "YPE\020[\022\023\n\017SYS_ENOPROTOOPT\020\\\022\027\n\023SYS_EPROTO" +
      "NOSUPPORT\020]\022\027\n\023SYS_ESOCKTNOSUPPORT\020^\022\022\n\016" +
      "SYS_EOPNOTSUPP\020_\022\024\n\020SYS_EPFNOSUPPORT\020`\022\024",
      "\n\020SYS_EAFNOSUPPORT\020a\022\022\n\016SYS_EADDRINUSE\020b" +
      "\022\025\n\021SYS_EADDRNOTAVAIL\020c\022\020\n\014SYS_ENETDOWN\020" +
      "d\022\023\n\017SYS_ENETUNREACH\020e\022\021\n\rSYS_ENETRESET\020" +
      "f\022\024\n\020SYS_ECONNABORTED\020g\022\022\n\016SYS_ECONNRESE" +
      "T\020h\022\017\n\013SYS_ENOBUFS\020i\022\017\n\013SYS_EISCONN\020j\022\020\n" +
      "\014SYS_ENOTCONN\020k\022\021\n\rSYS_ESHUTDOWN\020l\022\024\n\020SY" +
      "S_ETOOMANYREFS\020m\022\021\n\rSYS_ETIMEDOUT\020n\022\024\n\020S" +
      "YS_ECONNREFUSED\020o\022\021\n\rSYS_EHOSTDOWN\020p\022\024\n\020" +
      "SYS_EHOSTUNREACH\020q\022\020\n\014SYS_EALREADY\020r\022\023\n\017" +
      "SYS_EINPROGRESS\020s\022\016\n\nSYS_ESTALE\020t\022\017\n\013SYS",
      "_EUCLEAN\020u\022\017\n\013SYS_ENOTNAM\020v\022\017\n\013SYS_ENAVA" +
      "IL\020w\022\016\n\nSYS_EISNAM\020x\022\021\n\rSYS_EREMOTEIO\020y\022" +
      "\016\n\nSYS_EDQUOT\020z\022\021\n\rSYS_ENOMEDIUM\020{\022\023\n\017SY" +
      "S_EMEDIUMTYPE\020|\022\021\n\rSYS_ECANCELED\020}\022\016\n\nSY" +
      "S_ENOKEY\020~\022\023\n\017SYS_EKEYEXPIRED\020\177\022\024\n\017SYS_E" +
      "KEYREVOKED\020\200\001\022\025\n\020SYS_EKEYREJECTED\020\201\001\022\017\n\n" +
      "ENOSERVICE\020\351\007\022\016\n\tENOMETHOD\020\352\007\022\r\n\010EREQUES" +
      "T\020\353\007\022\n\n\005EAUTH\020\354\007\022\022\n\rETOOMANYFAILS\020\355\007\022\021\n\014" +
      "EPCHANFINISH\020\356\007\022\023\n\016EBACKUPREQUEST\020\357\007\022\021\n\014" +
      "ERPCTIMEDOUT\020\360\007\022\022\n\rEFAILEDSOCKET\020\361\007\022\n\n\005E",
      "HTTP\020\362\007\022\021\n\014EOVERCROWDED\020\363\007\022\025\n\020ERTMPPUBLI" +
      "SHABLE\020\364\007\022\026\n\021ERTMPCREATESTREAM\020\365\007\022\t\n\004EEO" +
      "F\020\366\007\022\014\n\007EUNUSED\020\367\007\022\016\n\tEINTERNAL\020\321\017\022\016\n\tER" +
      "ESPONSE\020\322\017\022\014\n\007ELOGOFF\020\323\017\022\013\n\006ELIMIT\020\324\017\022\013\n" +
      "\006ECLOSE\020\325\017\022\t\n\004EITP\020\326\017B(\n\027com.baidu.brpc." +
      "protocolB\rBaiduRpcErrno"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
